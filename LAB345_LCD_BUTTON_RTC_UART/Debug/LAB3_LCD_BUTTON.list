
LAB3_LCD_BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000490c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f90  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a24  08007a24  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a2c  08007a2c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a2c  08007a2c  00017a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a30  08007a30  00017a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000154  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f8b5  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a6b  00000000  00000000  0002f94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f80  00000000  00000000  000323b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bce  00000000  00000000  00033338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000231f7  00000000  00000000  00033f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013d7f  00000000  00000000  000570fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce74a  00000000  00000000  0006ae7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f6c  00000000  00000000  001395c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0013d534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a7c 	.word	0x08004a7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08004a7c 	.word	0x08004a7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2108      	movs	r1, #8
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <button_init+0x14>)
 80004ce:	f002 f9b1 	bl	8002834 <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40020c00 	.word	0x40020c00

080004dc <is_button_pressed>:

bool is_button_pressed(int i){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	return  button_count[i]==1;
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <is_button_pressed+0x28>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	bf0c      	ite	eq
 80004f0:	2301      	moveq	r3, #1
 80004f2:	2300      	movne	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000040 	.word	0x20000040

08000508 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2108      	movs	r1, #8
 8000512:	482f      	ldr	r0, [pc, #188]	; (80005d0 <button_Scan+0xc8>)
 8000514:	f002 f98e 	bl	8002834 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000518:	2201      	movs	r2, #1
 800051a:	2108      	movs	r1, #8
 800051c:	482c      	ldr	r0, [pc, #176]	; (80005d0 <button_Scan+0xc8>)
 800051e:	f002 f989 	bl	8002834 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000522:	230a      	movs	r3, #10
 8000524:	2202      	movs	r2, #2
 8000526:	492b      	ldr	r1, [pc, #172]	; (80005d4 <button_Scan+0xcc>)
 8000528:	482b      	ldr	r0, [pc, #172]	; (80005d8 <button_Scan+0xd0>)
 800052a:	f002 ffce 	bl	80034ca <HAL_SPI_Receive>
	  int button_index = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000536:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	e03f      	b.n	80005be <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b00      	cmp	r3, #0
 8000542:	db06      	blt.n	8000552 <button_Scan+0x4a>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b03      	cmp	r3, #3
 8000548:	dc03      	bgt.n	8000552 <button_Scan+0x4a>
			  button_index = i + 4;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3304      	adds	r3, #4
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	e018      	b.n	8000584 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b03      	cmp	r3, #3
 8000556:	dd07      	ble.n	8000568 <button_Scan+0x60>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b07      	cmp	r3, #7
 800055c:	dc04      	bgt.n	8000568 <button_Scan+0x60>
			  button_index = 7 - i;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f1c3 0307 	rsb	r3, r3, #7
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	e00d      	b.n	8000584 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b07      	cmp	r3, #7
 800056c:	dd06      	ble.n	800057c <button_Scan+0x74>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0b      	cmp	r3, #11
 8000572:	dc03      	bgt.n	800057c <button_Scan+0x74>
			  button_index = i + 4;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3304      	adds	r3, #4
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	e003      	b.n	8000584 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f1c3 0317 	rsb	r3, r3, #23
 8000582:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <button_Scan+0xcc>)
 8000586:	881a      	ldrh	r2, [r3, #0]
 8000588:	897b      	ldrh	r3, [r7, #10]
 800058a:	4013      	ands	r3, r2
 800058c:	b29b      	uxth	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d005      	beq.n	800059e <button_Scan+0x96>
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <button_Scan+0xd4>)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	2100      	movs	r1, #0
 8000598:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800059c:	e009      	b.n	80005b2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <button_Scan+0xd4>)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a6:	3301      	adds	r3, #1
 80005a8:	b299      	uxth	r1, r3
 80005aa:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <button_Scan+0xd4>)
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 80005b2:	897b      	ldrh	r3, [r7, #10]
 80005b4:	085b      	lsrs	r3, r3, #1
 80005b6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3301      	adds	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b0f      	cmp	r3, #15
 80005c2:	ddbc      	ble.n	800053e <button_Scan+0x36>
	  }
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020c00 	.word	0x40020c00
 80005d4:	20000060 	.word	0x20000060
 80005d8:	20000078 	.word	0x20000078
 80005dc:	20000040 	.word	0x20000040

080005e0 <fsm_automatic_run>:
 *      Author: PC
 */
#include "global.h"


void fsm_automatic_run() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	switch(lcd_status){
 80005e4:	4b89      	ldr	r3, [pc, #548]	; (800080c <fsm_automatic_run+0x22c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	2b05      	cmp	r3, #5
 80005ec:	f200 81f3 	bhi.w	80009d6 <fsm_automatic_run+0x3f6>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <fsm_automatic_run+0x18>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000611 	.word	0x08000611
 80005fc:	080009d7 	.word	0x080009d7
 8000600:	0800064f 	.word	0x0800064f
 8000604:	0800072d 	.word	0x0800072d
 8000608:	08000821 	.word	0x08000821
 800060c:	080008fd 	.word	0x080008fd
	case INIT:
		if(is_flag()){
 8000610:	f001 fc14 	bl	8001e3c <is_flag>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	f000 81df 	beq.w	80009da <fsm_automatic_run+0x3fa>
			lcd_Clear(WHITE);
 800061c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000620:	f000 fc5c 	bl	8000edc <lcd_Clear>
			lcd_status = AUTO_RED_GREEN;
 8000624:	4b79      	ldr	r3, [pc, #484]	; (800080c <fsm_automatic_run+0x22c>)
 8000626:	2203      	movs	r2, #3
 8000628:	601a      	str	r2, [r3, #0]
			set_timer((counter_green)*1000);
 800062a:	4b79      	ldr	r3, [pc, #484]	; (8000810 <fsm_automatic_run+0x230>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	b29b      	uxth	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	0152      	lsls	r2, r2, #5
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	0092      	lsls	r2, r2, #2
 8000638:	4413      	add	r3, r2
 800063a:	00db      	lsls	r3, r3, #3
 800063c:	b29b      	uxth	r3, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fb92 	bl	8001d68 <set_timer>
			set_timer1(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000648:	f001 fba4 	bl	8001d94 <set_timer1>
		}
		break;
 800064c:	e1c5      	b.n	80009da <fsm_automatic_run+0x3fa>

	case AUTO_RED_GREEN:
		if(is_flag()) {
 800064e:	f001 fbf5 	bl	8001e3c <is_flag>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d030      	beq.n	80006ba <fsm_automatic_run+0xda>
			lcd_status = AUTO_RED_YELLOW;
 8000658:	4b6c      	ldr	r3, [pc, #432]	; (800080c <fsm_automatic_run+0x22c>)
 800065a:	2204      	movs	r2, #4
 800065c:	601a      	str	r2, [r3, #0]
			lcd_set_traffic1(RED,counter_red-traffic_counter);
 800065e:	4b6d      	ldr	r3, [pc, #436]	; (8000814 <fsm_automatic_run+0x234>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <fsm_automatic_run+0x238>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	b29b      	uxth	r3, r3
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	b29b      	uxth	r3, r3
 800066e:	4619      	mov	r1, r3
 8000670:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000674:	f000 fb18 	bl	8000ca8 <lcd_set_traffic1>
			lcd_set_traffic2(GREEN, counter_green-traffic_counter);
 8000678:	4b65      	ldr	r3, [pc, #404]	; (8000810 <fsm_automatic_run+0x230>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	b29a      	uxth	r2, r3
 800067e:	4b66      	ldr	r3, [pc, #408]	; (8000818 <fsm_automatic_run+0x238>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	b29b      	uxth	r3, r3
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	b29b      	uxth	r3, r3
 8000688:	4619      	mov	r1, r3
 800068a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800068e:	f000 fb35 	bl	8000cfc <lcd_set_traffic2>
			traffic_counter=0;
 8000692:	4b61      	ldr	r3, [pc, #388]	; (8000818 <fsm_automatic_run+0x238>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
			set_timer((counter_yellow)*1000);
 8000698:	4b60      	ldr	r3, [pc, #384]	; (800081c <fsm_automatic_run+0x23c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	0152      	lsls	r2, r2, #5
 80006a2:	1ad2      	subs	r2, r2, r3
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fb5b 	bl	8001d68 <set_timer>
			set_timer1(1000);
 80006b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b6:	f001 fb6d 	bl	8001d94 <set_timer1>
		}
		if(is_flag1()){
 80006ba:	f001 fbd3 	bl	8001e64 <is_flag1>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d022      	beq.n	800070a <fsm_automatic_run+0x12a>
			lcd_set_traffic1(RED,counter_red-traffic_counter);
 80006c4:	4b53      	ldr	r3, [pc, #332]	; (8000814 <fsm_automatic_run+0x234>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4b53      	ldr	r3, [pc, #332]	; (8000818 <fsm_automatic_run+0x238>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	4619      	mov	r1, r3
 80006d6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80006da:	f000 fae5 	bl	8000ca8 <lcd_set_traffic1>
			lcd_set_traffic2(GREEN, counter_green-traffic_counter);
 80006de:	4b4c      	ldr	r3, [pc, #304]	; (8000810 <fsm_automatic_run+0x230>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b4c      	ldr	r3, [pc, #304]	; (8000818 <fsm_automatic_run+0x238>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80006f4:	f000 fb02 	bl	8000cfc <lcd_set_traffic2>
			traffic_counter++;
 80006f8:	4b47      	ldr	r3, [pc, #284]	; (8000818 <fsm_automatic_run+0x238>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a46      	ldr	r2, [pc, #280]	; (8000818 <fsm_automatic_run+0x238>)
 8000700:	6013      	str	r3, [r2, #0]
			set_timer1(1000);
 8000702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000706:	f001 fb45 	bl	8001d94 <set_timer1>
		}
		if(is_button_pressed(0)) {
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff fee6 	bl	80004dc <is_button_pressed>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	f000 8163 	beq.w	80009de <fsm_automatic_run+0x3fe>
			lcd_status= INIT_SETTING;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <fsm_automatic_run+0x22c>)
 800071a:	2202      	movs	r2, #2
 800071c:	601a      	str	r2, [r3, #0]
			traffic_counter=0;
 800071e:	4b3e      	ldr	r3, [pc, #248]	; (8000818 <fsm_automatic_run+0x238>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
			set_timer(5);
 8000724:	2005      	movs	r0, #5
 8000726:	f001 fb1f 	bl	8001d68 <set_timer>
		}
		break;
 800072a:	e158      	b.n	80009de <fsm_automatic_run+0x3fe>

	case AUTO_RED_YELLOW:
		if(is_flag()) {
 800072c:	f001 fb86 	bl	8001e3c <is_flag>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d030      	beq.n	8000798 <fsm_automatic_run+0x1b8>
			lcd_status = AUTO_GREEN_RED;
 8000736:	4b35      	ldr	r3, [pc, #212]	; (800080c <fsm_automatic_run+0x22c>)
 8000738:	2205      	movs	r2, #5
 800073a:	601a      	str	r2, [r3, #0]
			lcd_set_traffic1(RED,counter_yellow-traffic_counter);
 800073c:	4b37      	ldr	r3, [pc, #220]	; (800081c <fsm_automatic_run+0x23c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b35      	ldr	r3, [pc, #212]	; (8000818 <fsm_automatic_run+0x238>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	b29b      	uxth	r3, r3
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	b29b      	uxth	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000752:	f000 faa9 	bl	8000ca8 <lcd_set_traffic1>
			lcd_set_traffic2(YELLOW, counter_yellow-traffic_counter);
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <fsm_automatic_run+0x23c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	b29a      	uxth	r2, r3
 800075c:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <fsm_automatic_run+0x238>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	b29b      	uxth	r3, r3
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	b29b      	uxth	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800076c:	f000 fac6 	bl	8000cfc <lcd_set_traffic2>
			traffic_counter=0;
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <fsm_automatic_run+0x238>)
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
			set_timer((counter_green)*1000);
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <fsm_automatic_run+0x230>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	b29b      	uxth	r3, r3
 800077c:	461a      	mov	r2, r3
 800077e:	0152      	lsls	r2, r2, #5
 8000780:	1ad2      	subs	r2, r2, r3
 8000782:	0092      	lsls	r2, r2, #2
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	b29b      	uxth	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f001 faec 	bl	8001d68 <set_timer>
			set_timer1(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000794:	f001 fafe 	bl	8001d94 <set_timer1>
		}
		if(is_flag1()){
 8000798:	f001 fb64 	bl	8001e64 <is_flag1>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d022      	beq.n	80007e8 <fsm_automatic_run+0x208>
			lcd_set_traffic1(RED,counter_yellow-traffic_counter);
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <fsm_automatic_run+0x23c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <fsm_automatic_run+0x238>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80007b8:	f000 fa76 	bl	8000ca8 <lcd_set_traffic1>
			lcd_set_traffic2(YELLOW, counter_yellow-traffic_counter);
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <fsm_automatic_run+0x23c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <fsm_automatic_run+0x238>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80007d2:	f000 fa93 	bl	8000cfc <lcd_set_traffic2>
			traffic_counter++;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <fsm_automatic_run+0x238>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3301      	adds	r3, #1
 80007dc:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <fsm_automatic_run+0x238>)
 80007de:	6013      	str	r3, [r2, #0]
			set_timer1(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e4:	f001 fad6 	bl	8001d94 <set_timer1>
		}
		if(is_button_pressed(0)) {
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff fe77 	bl	80004dc <is_button_pressed>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	f000 80f6 	beq.w	80009e2 <fsm_automatic_run+0x402>
			lcd_status= INIT_SETTING;
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <fsm_automatic_run+0x22c>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	601a      	str	r2, [r3, #0]
			traffic_counter=0;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <fsm_automatic_run+0x238>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
			set_timer(5);
 8000802:	2005      	movs	r0, #5
 8000804:	f001 fab0 	bl	8001d68 <set_timer>
	    }
		break;
 8000808:	e0eb      	b.n	80009e2 <fsm_automatic_run+0x402>
 800080a:	bf00      	nop
 800080c:	20000064 	.word	0x20000064
 8000810:	20000008 	.word	0x20000008
 8000814:	20000004 	.word	0x20000004
 8000818:	20000068 	.word	0x20000068
 800081c:	2000000c 	.word	0x2000000c

	case AUTO_GREEN_RED:
		if(is_flag()) {
 8000820:	f001 fb0c 	bl	8001e3c <is_flag>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d030      	beq.n	800088c <fsm_automatic_run+0x2ac>
			lcd_status = AUTO_YELLOW_RED;
 800082a:	4b70      	ldr	r3, [pc, #448]	; (80009ec <fsm_automatic_run+0x40c>)
 800082c:	2206      	movs	r2, #6
 800082e:	601a      	str	r2, [r3, #0]
			lcd_set_traffic1(GREEN,counter_green-traffic_counter);
 8000830:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <fsm_automatic_run+0x410>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b29a      	uxth	r2, r3
 8000836:	4b6f      	ldr	r3, [pc, #444]	; (80009f4 <fsm_automatic_run+0x414>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	b29b      	uxth	r3, r3
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	b29b      	uxth	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000846:	f000 fa2f 	bl	8000ca8 <lcd_set_traffic1>
			lcd_set_traffic2(RED, counter_red-traffic_counter);
 800084a:	4b6b      	ldr	r3, [pc, #428]	; (80009f8 <fsm_automatic_run+0x418>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <fsm_automatic_run+0x414>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	b29b      	uxth	r3, r3
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	b29b      	uxth	r3, r3
 800085a:	4619      	mov	r1, r3
 800085c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000860:	f000 fa4c 	bl	8000cfc <lcd_set_traffic2>
			traffic_counter=0;
 8000864:	4b63      	ldr	r3, [pc, #396]	; (80009f4 <fsm_automatic_run+0x414>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
			set_timer((counter_yellow)*1000);
 800086a:	4b64      	ldr	r3, [pc, #400]	; (80009fc <fsm_automatic_run+0x41c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	0152      	lsls	r2, r2, #5
 8000874:	1ad2      	subs	r2, r2, r3
 8000876:	0092      	lsls	r2, r2, #2
 8000878:	4413      	add	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	b29b      	uxth	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fa72 	bl	8001d68 <set_timer>
			set_timer1(1000);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f001 fa84 	bl	8001d94 <set_timer1>
		}
		if(is_flag1()){
 800088c:	f001 faea 	bl	8001e64 <is_flag1>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d022      	beq.n	80008dc <fsm_automatic_run+0x2fc>
			lcd_set_traffic1(GREEN,counter_green-traffic_counter);
 8000896:	4b56      	ldr	r3, [pc, #344]	; (80009f0 <fsm_automatic_run+0x410>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b55      	ldr	r3, [pc, #340]	; (80009f4 <fsm_automatic_run+0x414>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	4619      	mov	r1, r3
 80008a8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80008ac:	f000 f9fc 	bl	8000ca8 <lcd_set_traffic1>
			lcd_set_traffic2(RED, counter_red-traffic_counter);
 80008b0:	4b51      	ldr	r3, [pc, #324]	; (80009f8 <fsm_automatic_run+0x418>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <fsm_automatic_run+0x414>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80008c6:	f000 fa19 	bl	8000cfc <lcd_set_traffic2>
			traffic_counter++;
 80008ca:	4b4a      	ldr	r3, [pc, #296]	; (80009f4 <fsm_automatic_run+0x414>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	4a48      	ldr	r2, [pc, #288]	; (80009f4 <fsm_automatic_run+0x414>)
 80008d2:	6013      	str	r3, [r2, #0]
			set_timer1(1000);
 80008d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d8:	f001 fa5c 	bl	8001d94 <set_timer1>
		}
		if(is_button_pressed(0)) {
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff fdfd 	bl	80004dc <is_button_pressed>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d07e      	beq.n	80009e6 <fsm_automatic_run+0x406>
			lcd_status= INIT_SETTING;
 80008e8:	4b40      	ldr	r3, [pc, #256]	; (80009ec <fsm_automatic_run+0x40c>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	601a      	str	r2, [r3, #0]
			traffic_counter=0;
 80008ee:	4b41      	ldr	r3, [pc, #260]	; (80009f4 <fsm_automatic_run+0x414>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
			set_timer(5);
 80008f4:	2005      	movs	r0, #5
 80008f6:	f001 fa37 	bl	8001d68 <set_timer>
	    }
		break;
 80008fa:	e074      	b.n	80009e6 <fsm_automatic_run+0x406>

	case AUTO_YELLOW_RED:
		if(is_flag()) {
 80008fc:	f001 fa9e 	bl	8001e3c <is_flag>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d030      	beq.n	8000968 <fsm_automatic_run+0x388>
			lcd_status = AUTO_RED_GREEN;
 8000906:	4b39      	ldr	r3, [pc, #228]	; (80009ec <fsm_automatic_run+0x40c>)
 8000908:	2203      	movs	r2, #3
 800090a:	601a      	str	r2, [r3, #0]
			lcd_set_traffic1(YELLOW,counter_yellow-traffic_counter);
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <fsm_automatic_run+0x41c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	b29a      	uxth	r2, r3
 8000912:	4b38      	ldr	r3, [pc, #224]	; (80009f4 <fsm_automatic_run+0x414>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	b29b      	uxth	r3, r3
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	b29b      	uxth	r3, r3
 800091c:	4619      	mov	r1, r3
 800091e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000922:	f000 f9c1 	bl	8000ca8 <lcd_set_traffic1>
			lcd_set_traffic2(RED, counter_yellow-traffic_counter);
 8000926:	4b35      	ldr	r3, [pc, #212]	; (80009fc <fsm_automatic_run+0x41c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <fsm_automatic_run+0x414>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	b29b      	uxth	r3, r3
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	b29b      	uxth	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800093c:	f000 f9de 	bl	8000cfc <lcd_set_traffic2>
			traffic_counter=0;
 8000940:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <fsm_automatic_run+0x414>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
			set_timer((counter_green)*1000);
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <fsm_automatic_run+0x410>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	b29b      	uxth	r3, r3
 800094c:	461a      	mov	r2, r3
 800094e:	0152      	lsls	r2, r2, #5
 8000950:	1ad2      	subs	r2, r2, r3
 8000952:	0092      	lsls	r2, r2, #2
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	b29b      	uxth	r3, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f001 fa04 	bl	8001d68 <set_timer>
			set_timer1(1000);
 8000960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000964:	f001 fa16 	bl	8001d94 <set_timer1>

		}
		if(is_flag1()){
 8000968:	f001 fa7c 	bl	8001e64 <is_flag1>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d022      	beq.n	80009b8 <fsm_automatic_run+0x3d8>
			lcd_set_traffic1(YELLOW,counter_yellow-traffic_counter);
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <fsm_automatic_run+0x41c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	b29a      	uxth	r2, r3
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <fsm_automatic_run+0x414>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	b29b      	uxth	r3, r3
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	b29b      	uxth	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000988:	f000 f98e 	bl	8000ca8 <lcd_set_traffic1>
			lcd_set_traffic2(RED, counter_yellow-traffic_counter);
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <fsm_automatic_run+0x41c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <fsm_automatic_run+0x414>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	b29b      	uxth	r3, r3
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	b29b      	uxth	r3, r3
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80009a2:	f000 f9ab 	bl	8000cfc <lcd_set_traffic2>
			traffic_counter++;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <fsm_automatic_run+0x414>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <fsm_automatic_run+0x414>)
 80009ae:	6013      	str	r3, [r2, #0]
			set_timer1(1000);
 80009b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b4:	f001 f9ee 	bl	8001d94 <set_timer1>
		}
		if(is_button_pressed(0)) {
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff fd8f 	bl	80004dc <is_button_pressed>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d008      	beq.n	80009d6 <fsm_automatic_run+0x3f6>
			lcd_status= INIT_SETTING;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <fsm_automatic_run+0x40c>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	601a      	str	r2, [r3, #0]
			traffic_counter=0;
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <fsm_automatic_run+0x414>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
			set_timer(5);
 80009d0:	2005      	movs	r0, #5
 80009d2:	f001 f9c9 	bl	8001d68 <set_timer>
	    }
	default:
		break;
 80009d6:	bf00      	nop
 80009d8:	e006      	b.n	80009e8 <fsm_automatic_run+0x408>
		break;
 80009da:	bf00      	nop
 80009dc:	e004      	b.n	80009e8 <fsm_automatic_run+0x408>
		break;
 80009de:	bf00      	nop
 80009e0:	e002      	b.n	80009e8 <fsm_automatic_run+0x408>
		break;
 80009e2:	bf00      	nop
 80009e4:	e000      	b.n	80009e8 <fsm_automatic_run+0x408>
		break;
 80009e6:	bf00      	nop
	}
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000064 	.word	0x20000064
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000068 	.word	0x20000068
 80009f8:	20000004 	.word	0x20000004
 80009fc:	2000000c 	.word	0x2000000c

08000a00 <fsm_setting_run>:
 *  Created on: Oct 23, 2023
 *      Author: PC
 */
#include "global.h"

void fsm_setting_run(){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	switch(lcd_status){
 8000a04:	4ba2      	ldr	r3, [pc, #648]	; (8000c90 <fsm_setting_run+0x290>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3b02      	subs	r3, #2
 8000a0a:	2b0a      	cmp	r3, #10
 8000a0c:	f200 8135 	bhi.w	8000c7a <fsm_setting_run+0x27a>
 8000a10:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <fsm_setting_run+0x18>)
 8000a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a16:	bf00      	nop
 8000a18:	08000a45 	.word	0x08000a45
 8000a1c:	08000c7b 	.word	0x08000c7b
 8000a20:	08000c7b 	.word	0x08000c7b
 8000a24:	08000c7b 	.word	0x08000c7b
 8000a28:	08000c7b 	.word	0x08000c7b
 8000a2c:	08000c7b 	.word	0x08000c7b
 8000a30:	08000c7b 	.word	0x08000c7b
 8000a34:	08000c7b 	.word	0x08000c7b
 8000a38:	08000a7f 	.word	0x08000a7f
 8000a3c:	08000be3 	.word	0x08000be3
 8000a40:	08000b31 	.word	0x08000b31
	case INIT_SETTING:
		lcd_Clear(WHITE);
 8000a44:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a48:	f000 fa48 	bl	8000edc <lcd_Clear>
		if(is_flag()){
 8000a4c:	f001 f9f6 	bl	8001e3c <is_flag>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 8113 	beq.w	8000c7e <fsm_setting_run+0x27e>
			lcd_blinky(RED, counter_red);
 8000a58:	4b8e      	ldr	r3, [pc, #568]	; (8000c94 <fsm_setting_run+0x294>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000a64:	f000 f996 	bl	8000d94 <lcd_blinky>
			lcd_status=SETTING_RED;
 8000a68:	4b89      	ldr	r3, [pc, #548]	; (8000c90 <fsm_setting_run+0x290>)
 8000a6a:	220a      	movs	r2, #10
 8000a6c:	601a      	str	r2, [r3, #0]
			temp = counter_red;
 8000a6e:	4b89      	ldr	r3, [pc, #548]	; (8000c94 <fsm_setting_run+0x294>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a89      	ldr	r2, [pc, #548]	; (8000c98 <fsm_setting_run+0x298>)
 8000a74:	6013      	str	r3, [r2, #0]
			set_timer(5);
 8000a76:	2005      	movs	r0, #5
 8000a78:	f001 f976 	bl	8001d68 <set_timer>
		}
		break;
 8000a7c:	e0ff      	b.n	8000c7e <fsm_setting_run+0x27e>
	case SETTING_RED:
		if(is_button_pressed(0)){
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fd2c 	bl	80004dc <is_button_pressed>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d019      	beq.n	8000abe <fsm_setting_run+0xbe>
			counter_red=temp;
 8000a8a:	4b83      	ldr	r3, [pc, #524]	; (8000c98 <fsm_setting_run+0x298>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a81      	ldr	r2, [pc, #516]	; (8000c94 <fsm_setting_run+0x294>)
 8000a90:	6013      	str	r3, [r2, #0]
			temp=counter_green;
 8000a92:	4b82      	ldr	r3, [pc, #520]	; (8000c9c <fsm_setting_run+0x29c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a80      	ldr	r2, [pc, #512]	; (8000c98 <fsm_setting_run+0x298>)
 8000a98:	6013      	str	r3, [r2, #0]
			lcd_status=SETTING_GREEN;
 8000a9a:	4b7d      	ldr	r3, [pc, #500]	; (8000c90 <fsm_setting_run+0x290>)
 8000a9c:	220c      	movs	r2, #12
 8000a9e:	601a      	str	r2, [r3, #0]
			setting_status=SETTING_OFF;
 8000aa0:	4b7f      	ldr	r3, [pc, #508]	; (8000ca0 <fsm_setting_run+0x2a0>)
 8000aa2:	2210      	movs	r2, #16
 8000aa4:	601a      	str	r2, [r3, #0]
			lcd_blinky(GREEN, counter_green);
 8000aa6:	4b7d      	ldr	r3, [pc, #500]	; (8000c9c <fsm_setting_run+0x29c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000ab2:	f000 f96f 	bl	8000d94 <lcd_blinky>
			set_timer(500);
 8000ab6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aba:	f001 f955 	bl	8001d68 <set_timer>
		}
		if(is_button_pressed(1)){
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff fd0c 	bl	80004dc <is_button_pressed>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00e      	beq.n	8000ae8 <fsm_setting_run+0xe8>
			if(counter_red<=99){
 8000aca:	4b72      	ldr	r3, [pc, #456]	; (8000c94 <fsm_setting_run+0x294>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b63      	cmp	r3, #99	; 0x63
 8000ad0:	dc05      	bgt.n	8000ade <fsm_setting_run+0xde>
				counter_red++;
 8000ad2:	4b70      	ldr	r3, [pc, #448]	; (8000c94 <fsm_setting_run+0x294>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a6e      	ldr	r2, [pc, #440]	; (8000c94 <fsm_setting_run+0x294>)
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	e004      	b.n	8000ae8 <fsm_setting_run+0xe8>
			}else{
				counter_red=counter_yellow+1;
 8000ade:	4b71      	ldr	r3, [pc, #452]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	4a6b      	ldr	r2, [pc, #428]	; (8000c94 <fsm_setting_run+0x294>)
 8000ae6:	6013      	str	r3, [r2, #0]
			}
		}
		if(is_button_pressed(2)){
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f7ff fcf7 	bl	80004dc <is_button_pressed>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00a      	beq.n	8000b0a <fsm_setting_run+0x10a>
			temp=counter_red;
 8000af4:	4b67      	ldr	r3, [pc, #412]	; (8000c94 <fsm_setting_run+0x294>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a67      	ldr	r2, [pc, #412]	; (8000c98 <fsm_setting_run+0x298>)
 8000afa:	6013      	str	r3, [r2, #0]
			counter_green=counter_red-counter_yellow;
 8000afc:	4b65      	ldr	r3, [pc, #404]	; (8000c94 <fsm_setting_run+0x294>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b68      	ldr	r3, [pc, #416]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4a65      	ldr	r2, [pc, #404]	; (8000c9c <fsm_setting_run+0x29c>)
 8000b08:	6013      	str	r3, [r2, #0]
		}
		if(is_flag()){
 8000b0a:	f001 f997 	bl	8001e3c <is_flag>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f000 80b6 	beq.w	8000c82 <fsm_setting_run+0x282>
			lcd_blinky(RED, counter_red);
 8000b16:	4b5f      	ldr	r3, [pc, #380]	; (8000c94 <fsm_setting_run+0x294>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000b22:	f000 f937 	bl	8000d94 <lcd_blinky>
			set_timer(500);
 8000b26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b2a:	f001 f91d 	bl	8001d68 <set_timer>
		}
		break;
 8000b2e:	e0a8      	b.n	8000c82 <fsm_setting_run+0x282>
	case SETTING_GREEN:
		if(is_button_pressed(0)){
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fcd3 	bl	80004dc <is_button_pressed>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d019      	beq.n	8000b70 <fsm_setting_run+0x170>
			counter_green=temp;
 8000b3c:	4b56      	ldr	r3, [pc, #344]	; (8000c98 <fsm_setting_run+0x298>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a56      	ldr	r2, [pc, #344]	; (8000c9c <fsm_setting_run+0x29c>)
 8000b42:	6013      	str	r3, [r2, #0]
			temp=counter_yellow;
 8000b44:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a53      	ldr	r2, [pc, #332]	; (8000c98 <fsm_setting_run+0x298>)
 8000b4a:	6013      	str	r3, [r2, #0]
			lcd_status=SETTING_YELLOW;
 8000b4c:	4b50      	ldr	r3, [pc, #320]	; (8000c90 <fsm_setting_run+0x290>)
 8000b4e:	220b      	movs	r2, #11
 8000b50:	601a      	str	r2, [r3, #0]
			setting_status=SETTING_OFF;
 8000b52:	4b53      	ldr	r3, [pc, #332]	; (8000ca0 <fsm_setting_run+0x2a0>)
 8000b54:	2210      	movs	r2, #16
 8000b56:	601a      	str	r2, [r3, #0]
			lcd_blinky(YELLOW, counter_yellow);
 8000b58:	4b52      	ldr	r3, [pc, #328]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000b64:	f000 f916 	bl	8000d94 <lcd_blinky>
			set_timer(500);
 8000b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6c:	f001 f8fc 	bl	8001d68 <set_timer>
		}
		if(is_button_pressed(1)){
 8000b70:	2001      	movs	r0, #1
 8000b72:	f7ff fcb3 	bl	80004dc <is_button_pressed>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00f      	beq.n	8000b9c <fsm_setting_run+0x19c>
			if(counter_green+counter_yellow<=99){
 8000b7c:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <fsm_setting_run+0x29c>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4413      	add	r3, r2
 8000b86:	2b63      	cmp	r3, #99	; 0x63
 8000b88:	dc05      	bgt.n	8000b96 <fsm_setting_run+0x196>
				counter_green++;
 8000b8a:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <fsm_setting_run+0x29c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4a42      	ldr	r2, [pc, #264]	; (8000c9c <fsm_setting_run+0x29c>)
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	e002      	b.n	8000b9c <fsm_setting_run+0x19c>
			}else counter_green=1;
 8000b96:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <fsm_setting_run+0x29c>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(2)){
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f7ff fc9d 	bl	80004dc <is_button_pressed>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d00a      	beq.n	8000bbe <fsm_setting_run+0x1be>
			temp=counter_green;
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <fsm_setting_run+0x29c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a3a      	ldr	r2, [pc, #232]	; (8000c98 <fsm_setting_run+0x298>)
 8000bae:	6013      	str	r3, [r2, #0]
			counter_red=counter_green+counter_yellow;
 8000bb0:	4b3a      	ldr	r3, [pc, #232]	; (8000c9c <fsm_setting_run+0x29c>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <fsm_setting_run+0x294>)
 8000bbc:	6013      	str	r3, [r2, #0]
		}
		if(is_flag()){
 8000bbe:	f001 f93d 	bl	8001e3c <is_flag>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d05e      	beq.n	8000c86 <fsm_setting_run+0x286>
			lcd_blinky(GREEN, counter_green);
 8000bc8:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <fsm_setting_run+0x29c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000bd4:	f000 f8de 	bl	8000d94 <lcd_blinky>
			set_timer(500);
 8000bd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bdc:	f001 f8c4 	bl	8001d68 <set_timer>
		}
		break;
 8000be0:	e051      	b.n	8000c86 <fsm_setting_run+0x286>
	case SETTING_YELLOW:
		if(is_button_pressed(0)){
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff fc7a 	bl	80004dc <is_button_pressed>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00c      	beq.n	8000c08 <fsm_setting_run+0x208>
			counter_yellow=temp;
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <fsm_setting_run+0x298>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a2c      	ldr	r2, [pc, #176]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000bf4:	6013      	str	r3, [r2, #0]
			temp=0;
 8000bf6:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <fsm_setting_run+0x298>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
			lcd_status=INIT;
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <fsm_setting_run+0x290>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
			set_timer(10);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f001 f8b0 	bl	8001d68 <set_timer>
		}
		if(is_button_pressed(1)){
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fc67 	bl	80004dc <is_button_pressed>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00f      	beq.n	8000c34 <fsm_setting_run+0x234>
			if(counter_green+counter_yellow<=99){
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <fsm_setting_run+0x29c>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	2b63      	cmp	r3, #99	; 0x63
 8000c20:	dc05      	bgt.n	8000c2e <fsm_setting_run+0x22e>
				counter_yellow++;
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e002      	b.n	8000c34 <fsm_setting_run+0x234>
			}else counter_yellow=1;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(2)){
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff fc51 	bl	80004dc <is_button_pressed>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00a      	beq.n	8000c56 <fsm_setting_run+0x256>
			temp=counter_yellow;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <fsm_setting_run+0x298>)
 8000c46:	6013      	str	r3, [r2, #0]
			counter_red = counter_green+counter_yellow;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <fsm_setting_run+0x29c>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <fsm_setting_run+0x294>)
 8000c54:	6013      	str	r3, [r2, #0]
		}
		if(is_flag()){
 8000c56:	f001 f8f1 	bl	8001e3c <is_flag>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d014      	beq.n	8000c8a <fsm_setting_run+0x28a>
			lcd_blinky(YELLOW, counter_yellow);
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <fsm_setting_run+0x2a4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4619      	mov	r1, r3
 8000c68:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000c6c:	f000 f892 	bl	8000d94 <lcd_blinky>
			set_timer(500);
 8000c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c74:	f001 f878 	bl	8001d68 <set_timer>
		}
		break;
 8000c78:	e007      	b.n	8000c8a <fsm_setting_run+0x28a>
	default:
		break;
 8000c7a:	bf00      	nop
 8000c7c:	e006      	b.n	8000c8c <fsm_setting_run+0x28c>
		break;
 8000c7e:	bf00      	nop
 8000c80:	e004      	b.n	8000c8c <fsm_setting_run+0x28c>
		break;
 8000c82:	bf00      	nop
 8000c84:	e002      	b.n	8000c8c <fsm_setting_run+0x28c>
		break;
 8000c86:	bf00      	nop
 8000c88:	e000      	b.n	8000c8c <fsm_setting_run+0x28c>
		break;
 8000c8a:	bf00      	nop
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000064 	.word	0x20000064
 8000c94:	20000004 	.word	0x20000004
 8000c98:	2000006c 	.word	0x2000006c
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	2000000c 	.word	0x2000000c

08000ca8 <lcd_set_traffic1>:

unsigned char s[50];

_lcd_dev lcddev;

void lcd_set_traffic1(uint16_t c,uint16_t num){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af04      	add	r7, sp, #16
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	80fb      	strh	r3, [r7, #6]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	80bb      	strh	r3, [r7, #4]
	lcd_ShowIntNum(135, 65, num, 2, BRED, WHITE, 32);
 8000cb8:	88ba      	ldrh	r2, [r7, #4]
 8000cba:	2320      	movs	r3, #32
 8000cbc:	9302      	str	r3, [sp, #8]
 8000cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2302      	movs	r3, #2
 8000ccc:	2141      	movs	r1, #65	; 0x41
 8000cce:	2087      	movs	r0, #135	; 0x87
 8000cd0:	f000 fa3a 	bl	8001148 <lcd_ShowIntNum>
	lcd_DrawCircle(60, 80, c, 40, 1);
 8000cd4:	88fa      	ldrh	r2, [r7, #6]
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2328      	movs	r3, #40	; 0x28
 8000cdc:	2150      	movs	r1, #80	; 0x50
 8000cde:	203c      	movs	r0, #60	; 0x3c
 8000ce0:	f000 fcbf 	bl	8001662 <lcd_DrawCircle>
	lcd_DrawCircle(160, 80, c, 40, 0);
 8000ce4:	88fa      	ldrh	r2, [r7, #6]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2328      	movs	r3, #40	; 0x28
 8000cec:	2150      	movs	r1, #80	; 0x50
 8000cee:	20a0      	movs	r0, #160	; 0xa0
 8000cf0:	f000 fcb7 	bl	8001662 <lcd_DrawCircle>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <lcd_set_traffic2>:

void lcd_set_traffic2(uint16_t c,uint16_t num){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af04      	add	r7, sp, #16
 8000d02:	4603      	mov	r3, r0
 8000d04:	460a      	mov	r2, r1
 8000d06:	80fb      	strh	r3, [r7, #6]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	80bb      	strh	r3, [r7, #4]
	lcd_ShowIntNum(135, 205, num, 2, BRED, WHITE, 32);
 8000d0c:	88ba      	ldrh	r2, [r7, #4]
 8000d0e:	2320      	movs	r3, #32
 8000d10:	9302      	str	r3, [sp, #8]
 8000d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	21cd      	movs	r1, #205	; 0xcd
 8000d22:	2087      	movs	r0, #135	; 0x87
 8000d24:	f000 fa10 	bl	8001148 <lcd_ShowIntNum>
	lcd_DrawCircle(60, 220, c, 40, 1);
 8000d28:	88fa      	ldrh	r2, [r7, #6]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2328      	movs	r3, #40	; 0x28
 8000d30:	21dc      	movs	r1, #220	; 0xdc
 8000d32:	203c      	movs	r0, #60	; 0x3c
 8000d34:	f000 fc95 	bl	8001662 <lcd_DrawCircle>
	lcd_DrawCircle(160, 220, c, 40, 0);
 8000d38:	88fa      	ldrh	r2, [r7, #6]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2328      	movs	r3, #40	; 0x28
 8000d40:	21dc      	movs	r1, #220	; 0xdc
 8000d42:	20a0      	movs	r0, #160	; 0xa0
 8000d44:	f000 fc8d 	bl	8001662 <lcd_DrawCircle>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <lcd_set_traffic_setting>:

void lcd_set_traffic_setting(uint16_t c,uint16_t num){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af04      	add	r7, sp, #16
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	80fb      	strh	r3, [r7, #6]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	80bb      	strh	r3, [r7, #4]
	lcd_ShowIntNum(135, 135, num, 2, BRED, WHITE, 32);
 8000d60:	88ba      	ldrh	r2, [r7, #4]
 8000d62:	2320      	movs	r3, #32
 8000d64:	9302      	str	r3, [sp, #8]
 8000d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2302      	movs	r3, #2
 8000d74:	2187      	movs	r1, #135	; 0x87
 8000d76:	2087      	movs	r0, #135	; 0x87
 8000d78:	f000 f9e6 	bl	8001148 <lcd_ShowIntNum>
	lcd_DrawCircle(60, 150, c, 40, 1);
 8000d7c:	88fa      	ldrh	r2, [r7, #6]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2328      	movs	r3, #40	; 0x28
 8000d84:	2196      	movs	r1, #150	; 0x96
 8000d86:	203c      	movs	r0, #60	; 0x3c
 8000d88:	f000 fc6b 	bl	8001662 <lcd_DrawCircle>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <lcd_blinky>:

void lcd_blinky(uint16_t c,uint16_t num){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	80fb      	strh	r3, [r7, #6]
 8000da0:	4613      	mov	r3, r2
 8000da2:	80bb      	strh	r3, [r7, #4]
	if(setting_status == SETTING_ON){
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <lcd_blinky+0x48>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d109      	bne.n	8000dc0 <lcd_blinky+0x2c>
		lcd_set_traffic_setting(WHITE,num);
 8000dac:	88bb      	ldrh	r3, [r7, #4]
 8000dae:	4619      	mov	r1, r3
 8000db0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000db4:	f7ff ffcc 	bl	8000d50 <lcd_set_traffic_setting>
		setting_status = SETTING_OFF;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <lcd_blinky+0x48>)
 8000dba:	2210      	movs	r2, #16
 8000dbc:	601a      	str	r2, [r3, #0]
	}else{
		lcd_set_traffic_setting(c,num);
		setting_status = SETTING_ON;
	}
}
 8000dbe:	e008      	b.n	8000dd2 <lcd_blinky+0x3e>
		lcd_set_traffic_setting(c,num);
 8000dc0:	88ba      	ldrh	r2, [r7, #4]
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ffc2 	bl	8000d50 <lcd_set_traffic_setting>
		setting_status = SETTING_ON;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <lcd_blinky+0x48>)
 8000dce:	220f      	movs	r2, #15
 8000dd0:	601a      	str	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000000 	.word	0x20000000

08000de0 <LCD_WR_REG>:

void LCD_WR_REG(uint16_t reg)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <LCD_WR_REG+0x1c>)
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	8013      	strh	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	600ffffe 	.word	0x600ffffe

08000e00 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <LCD_WR_DATA+0x1c>)
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	8053      	strh	r3, [r2, #2]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	600ffffe 	.word	0x600ffffe

08000e20 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <LCD_RD_DATA+0x20>)
 8000e28:	885b      	ldrh	r3, [r3, #2]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	b29b      	uxth	r3, r3
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	600ffffe 	.word	0x600ffffe

08000e44 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	4611      	mov	r1, r2
 8000e50:	461a      	mov	r2, r3
 8000e52:	4623      	mov	r3, r4
 8000e54:	80fb      	strh	r3, [r7, #6]
 8000e56:	4603      	mov	r3, r0
 8000e58:	80bb      	strh	r3, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	807b      	strh	r3, [r7, #2]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000e62:	202a      	movs	r0, #42	; 0x2a
 8000e64:	f7ff ffbc 	bl	8000de0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ffc6 	bl	8000e00 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ffc0 	bl	8000e00 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ffba 	bl	8000e00 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffb4 	bl	8000e00 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000e98:	202b      	movs	r0, #43	; 0x2b
 8000e9a:	f7ff ffa1 	bl	8000de0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000e9e:	88bb      	ldrh	r3, [r7, #4]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ffab 	bl	8000e00 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ffa5 	bl	8000e00 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000eb6:	883b      	ldrh	r3, [r7, #0]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff9f 	bl	8000e00 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ec2:	883b      	ldrh	r3, [r7, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff99 	bl	8000e00 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000ece:	202c      	movs	r0, #44	; 0x2c
 8000ed0:	f7ff ff86 	bl	8000de0 <LCD_WR_REG>
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd90      	pop	{r4, r7, pc}

08000edc <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <lcd_Clear+0x60>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <lcd_Clear+0x60>)
 8000ef0:	885b      	ldrh	r3, [r3, #2]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff ffa3 	bl	8000e44 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	81fb      	strh	r3, [r7, #14]
 8000f02:	e011      	b.n	8000f28 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	81bb      	strh	r3, [r7, #12]
 8000f08:	e006      	b.n	8000f18 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff77 	bl	8000e00 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000f12:	89bb      	ldrh	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	81bb      	strh	r3, [r7, #12]
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <lcd_Clear+0x60>)
 8000f1a:	885b      	ldrh	r3, [r3, #2]
 8000f1c:	89ba      	ldrh	r2, [r7, #12]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d3f3      	bcc.n	8000f0a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000f22:	89fb      	ldrh	r3, [r7, #14]
 8000f24:	3301      	adds	r3, #1
 8000f26:	81fb      	strh	r3, [r7, #14]
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <lcd_Clear+0x60>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	89fa      	ldrh	r2, [r7, #14]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3e8      	bcc.n	8000f04 <lcd_Clear+0x28>
		}
	}
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000070 	.word	0x20000070

08000f40 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	80bb      	strh	r3, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000f52:	88bb      	ldrh	r3, [r7, #4]
 8000f54:	88fa      	ldrh	r2, [r7, #6]
 8000f56:	88b9      	ldrh	r1, [r7, #4]
 8000f58:	88f8      	ldrh	r0, [r7, #6]
 8000f5a:	f7ff ff73 	bl	8000e44 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff4d 	bl	8000e00 <LCD_WR_DATA>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4623      	mov	r3, r4
 8000f80:	80fb      	strh	r3, [r7, #6]
 8000f82:	4603      	mov	r3, r0
 8000f84:	80bb      	strh	r3, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70fb      	strb	r3, [r7, #3]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000f96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f9a:	085b      	lsrs	r3, r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	2300      	moveq	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	fb12 f303 	smulbb	r3, r2, r3
 8000fc6:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	3b20      	subs	r3, #32
 8000fcc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	b29c      	uxth	r4, r3
 8000fdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	88bb      	ldrh	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	88b9      	ldrh	r1, [r7, #4]
 8000fee:	88f8      	ldrh	r0, [r7, #6]
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	f7ff ff27 	bl	8000e44 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	827b      	strh	r3, [r7, #18]
 8000ffa:	e07a      	b.n	80010f2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000ffc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001000:	2b0c      	cmp	r3, #12
 8001002:	d028      	beq.n	8001056 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001004:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001008:	2b10      	cmp	r3, #16
 800100a:	d108      	bne.n	800101e <lcd_ShowChar+0xae>
 800100c:	78fa      	ldrb	r2, [r7, #3]
 800100e:	8a7b      	ldrh	r3, [r7, #18]
 8001010:	493c      	ldr	r1, [pc, #240]	; (8001104 <lcd_ShowChar+0x194>)
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	440a      	add	r2, r1
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	75fb      	strb	r3, [r7, #23]
 800101c:	e01b      	b.n	8001056 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800101e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001022:	2b18      	cmp	r3, #24
 8001024:	d10b      	bne.n	800103e <lcd_ShowChar+0xce>
 8001026:	78fa      	ldrb	r2, [r7, #3]
 8001028:	8a79      	ldrh	r1, [r7, #18]
 800102a:	4837      	ldr	r0, [pc, #220]	; (8001108 <lcd_ShowChar+0x198>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4403      	add	r3, r0
 8001036:	440b      	add	r3, r1
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	75fb      	strb	r3, [r7, #23]
 800103c:	e00b      	b.n	8001056 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800103e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001042:	2b20      	cmp	r3, #32
 8001044:	d15a      	bne.n	80010fc <lcd_ShowChar+0x18c>
 8001046:	78fa      	ldrb	r2, [r7, #3]
 8001048:	8a7b      	ldrh	r3, [r7, #18]
 800104a:	4930      	ldr	r1, [pc, #192]	; (800110c <lcd_ShowChar+0x19c>)
 800104c:	0192      	lsls	r2, r2, #6
 800104e:	440a      	add	r2, r1
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001056:	2300      	movs	r3, #0
 8001058:	75bb      	strb	r3, [r7, #22]
 800105a:	e044      	b.n	80010e6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 800105c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001060:	2b00      	cmp	r3, #0
 8001062:	d120      	bne.n	80010a6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001064:	7dfa      	ldrb	r2, [r7, #23]
 8001066:	7dbb      	ldrb	r3, [r7, #22]
 8001068:	fa42 f303 	asr.w	r3, r2, r3
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <lcd_ShowChar+0x10e>
 8001074:	883b      	ldrh	r3, [r7, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fec2 	bl	8000e00 <LCD_WR_DATA>
 800107c:	e003      	b.n	8001086 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800107e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff febd 	bl	8000e00 <LCD_WR_DATA>
				m++;
 8001086:	7d7b      	ldrb	r3, [r7, #21]
 8001088:	3301      	adds	r3, #1
 800108a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 800108c:	7d7b      	ldrb	r3, [r7, #21]
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	fbb3 f1f2 	udiv	r1, r3, r2
 8001094:	fb01 f202 	mul.w	r2, r1, r2
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d11f      	bne.n	80010e0 <lcd_ShowChar+0x170>
				{
					m=0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	757b      	strb	r3, [r7, #21]
					break;
 80010a4:	e022      	b.n	80010ec <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80010a6:	7dfa      	ldrb	r2, [r7, #23]
 80010a8:	7dbb      	ldrb	r3, [r7, #22]
 80010aa:	fa42 f303 	asr.w	r3, r2, r3
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <lcd_ShowChar+0x152>
 80010b6:	883a      	ldrh	r2, [r7, #0]
 80010b8:	88b9      	ldrh	r1, [r7, #4]
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff3f 	bl	8000f40 <lcd_DrawPoint>
				x++;
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	3301      	adds	r3, #1
 80010c6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80010c8:	88fa      	ldrh	r2, [r7, #6]
 80010ca:	8a3b      	ldrh	r3, [r7, #16]
 80010cc:	1ad2      	subs	r2, r2, r3
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d105      	bne.n	80010e0 <lcd_ShowChar+0x170>
				{
					x=x0;
 80010d4:	8a3b      	ldrh	r3, [r7, #16]
 80010d6:	80fb      	strh	r3, [r7, #6]
					y++;
 80010d8:	88bb      	ldrh	r3, [r7, #4]
 80010da:	3301      	adds	r3, #1
 80010dc:	80bb      	strh	r3, [r7, #4]
					break;
 80010de:	e005      	b.n	80010ec <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80010e0:	7dbb      	ldrb	r3, [r7, #22]
 80010e2:	3301      	adds	r3, #1
 80010e4:	75bb      	strb	r3, [r7, #22]
 80010e6:	7dbb      	ldrb	r3, [r7, #22]
 80010e8:	2b07      	cmp	r3, #7
 80010ea:	d9b7      	bls.n	800105c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80010ec:	8a7b      	ldrh	r3, [r7, #18]
 80010ee:	3301      	adds	r3, #1
 80010f0:	827b      	strh	r3, [r7, #18]
 80010f2:	8a7a      	ldrh	r2, [r7, #18]
 80010f4:	89bb      	ldrh	r3, [r7, #12]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d380      	bcc.n	8000ffc <lcd_ShowChar+0x8c>
 80010fa:	e000      	b.n	80010fe <lcd_ShowChar+0x18e>
		else return;
 80010fc:	bf00      	nop
				}
			}
		}
	}
}
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	08004a94 	.word	0x08004a94
 8001108:	08005084 	.word	0x08005084
 800110c:	08006254 	.word	0x08006254

08001110 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001120:	2301      	movs	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001124:	e004      	b.n	8001130 <mypow+0x20>
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	fb02 f303 	mul.w	r3, r2, r3
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	1e5a      	subs	r2, r3, #1
 8001134:	71ba      	strb	r2, [r7, #6]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f5      	bne.n	8001126 <mypow+0x16>
	return result;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af04      	add	r7, sp, #16
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	461a      	mov	r2, r3
 8001156:	4623      	mov	r3, r4
 8001158:	80fb      	strh	r3, [r7, #6]
 800115a:	4603      	mov	r3, r0
 800115c:	80bb      	strh	r3, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	807b      	strh	r3, [r7, #2]
 8001162:	4613      	mov	r3, r2
 8001164:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001166:	2300      	movs	r3, #0
 8001168:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800116a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800116e:	085b      	lsrs	r3, r3, #1
 8001170:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e059      	b.n	800122c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001178:	887c      	ldrh	r4, [r7, #2]
 800117a:	787a      	ldrb	r2, [r7, #1]
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	3b01      	subs	r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	200a      	movs	r0, #10
 800118a:	f7ff ffc1 	bl	8001110 <mypow>
 800118e:	4603      	mov	r3, r0
 8001190:	fbb4 f1f3 	udiv	r1, r4, r3
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <lcd_ShowIntNum+0xf8>)
 8001196:	fba3 2301 	umull	r2, r3, r3, r1
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	1aca      	subs	r2, r1, r3
 80011a6:	4613      	mov	r3, r2
 80011a8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d121      	bne.n	80011f4 <lcd_ShowIntNum+0xac>
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	787b      	ldrb	r3, [r7, #1]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	429a      	cmp	r2, r3
 80011b8:	da1c      	bge.n	80011f4 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80011ba:	7b3b      	ldrb	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d117      	bne.n	80011f0 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	fb12 f303 	smulbb	r3, r2, r3
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	4413      	add	r3, r2
 80011d2:	b298      	uxth	r0, r3
 80011d4:	8c3a      	ldrh	r2, [r7, #32]
 80011d6:	88b9      	ldrh	r1, [r7, #4]
 80011d8:	2300      	movs	r3, #0
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4613      	mov	r3, r2
 80011e8:	2220      	movs	r2, #32
 80011ea:	f7ff fec1 	bl	8000f70 <lcd_ShowChar>
				continue;
 80011ee:	e01a      	b.n	8001226 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	7b7b      	ldrb	r3, [r7, #13]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	fb12 f303 	smulbb	r3, r2, r3
 8001200:	b29a      	uxth	r2, r3
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	4413      	add	r3, r2
 8001206:	b298      	uxth	r0, r3
 8001208:	7b3b      	ldrb	r3, [r7, #12]
 800120a:	3330      	adds	r3, #48	; 0x30
 800120c:	b2da      	uxtb	r2, r3
 800120e:	8c3c      	ldrh	r4, [r7, #32]
 8001210:	88b9      	ldrh	r1, [r7, #4]
 8001212:	2300      	movs	r3, #0
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	4623      	mov	r3, r4
 8001222:	f7ff fea5 	bl	8000f70 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	3301      	adds	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	787b      	ldrb	r3, [r7, #1]
 8001230:	429a      	cmp	r2, r3
 8001232:	d3a1      	bcc.n	8001178 <lcd_ShowIntNum+0x30>
	}
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bd90      	pop	{r4, r7, pc}
 800123e:	bf00      	nop
 8001240:	cccccccd 	.word	0xcccccccd

08001244 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <lcd_SetDir+0x44>)
 8001260:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001264:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <lcd_SetDir+0x44>)
 8001268:	22f0      	movs	r2, #240	; 0xf0
 800126a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800126c:	e006      	b.n	800127c <lcd_SetDir+0x38>
		lcddev.width=240;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <lcd_SetDir+0x44>)
 8001270:	22f0      	movs	r2, #240	; 0xf0
 8001272:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <lcd_SetDir+0x44>)
 8001276:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800127a:	805a      	strh	r2, [r3, #2]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	20000070 	.word	0x20000070

0800128c <lcd_init>:


void lcd_init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001296:	48aa      	ldr	r0, [pc, #680]	; (8001540 <lcd_init+0x2b4>)
 8001298:	f001 facc 	bl	8002834 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800129c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a0:	f000 ffd4 	bl	800224c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012aa:	48a5      	ldr	r0, [pc, #660]	; (8001540 <lcd_init+0x2b4>)
 80012ac:	f001 fac2 	bl	8002834 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80012b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b4:	f000 ffca 	bl	800224c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff ffc3 	bl	8001244 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80012be:	20d3      	movs	r0, #211	; 0xd3
 80012c0:	f7ff fd8e 	bl	8000de0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80012c4:	f7ff fdac 	bl	8000e20 <LCD_RD_DATA>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b9d      	ldr	r3, [pc, #628]	; (8001544 <lcd_init+0x2b8>)
 80012ce:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80012d0:	f7ff fda6 	bl	8000e20 <LCD_RD_DATA>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b9a      	ldr	r3, [pc, #616]	; (8001544 <lcd_init+0x2b8>)
 80012da:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80012dc:	f7ff fda0 	bl	8000e20 <LCD_RD_DATA>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b97      	ldr	r3, [pc, #604]	; (8001544 <lcd_init+0x2b8>)
 80012e6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80012e8:	4b96      	ldr	r3, [pc, #600]	; (8001544 <lcd_init+0x2b8>)
 80012ea:	889b      	ldrh	r3, [r3, #4]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b94      	ldr	r3, [pc, #592]	; (8001544 <lcd_init+0x2b8>)
 80012f2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80012f4:	f7ff fd94 	bl	8000e20 <LCD_RD_DATA>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b91      	ldr	r3, [pc, #580]	; (8001544 <lcd_init+0x2b8>)
 80012fe:	889b      	ldrh	r3, [r3, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <lcd_init+0x2b8>)
 8001306:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001308:	20cf      	movs	r0, #207	; 0xcf
 800130a:	f7ff fd69 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fd76 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001314:	20c1      	movs	r0, #193	; 0xc1
 8001316:	f7ff fd73 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800131a:	2030      	movs	r0, #48	; 0x30
 800131c:	f7ff fd70 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001320:	20ed      	movs	r0, #237	; 0xed
 8001322:	f7ff fd5d 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001326:	2064      	movs	r0, #100	; 0x64
 8001328:	f7ff fd6a 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800132c:	2003      	movs	r0, #3
 800132e:	f7ff fd67 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001332:	2012      	movs	r0, #18
 8001334:	f7ff fd64 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001338:	2081      	movs	r0, #129	; 0x81
 800133a:	f7ff fd61 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800133e:	20e8      	movs	r0, #232	; 0xe8
 8001340:	f7ff fd4e 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001344:	2085      	movs	r0, #133	; 0x85
 8001346:	f7ff fd5b 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800134a:	2010      	movs	r0, #16
 800134c:	f7ff fd58 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001350:	207a      	movs	r0, #122	; 0x7a
 8001352:	f7ff fd55 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001356:	20cb      	movs	r0, #203	; 0xcb
 8001358:	f7ff fd42 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800135c:	2039      	movs	r0, #57	; 0x39
 800135e:	f7ff fd4f 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001362:	202c      	movs	r0, #44	; 0x2c
 8001364:	f7ff fd4c 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff fd49 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800136e:	2034      	movs	r0, #52	; 0x34
 8001370:	f7ff fd46 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff fd43 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800137a:	20f7      	movs	r0, #247	; 0xf7
 800137c:	f7ff fd30 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001380:	2020      	movs	r0, #32
 8001382:	f7ff fd3d 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001386:	20ea      	movs	r0, #234	; 0xea
 8001388:	f7ff fd2a 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff fd37 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff fd34 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001398:	20c0      	movs	r0, #192	; 0xc0
 800139a:	f7ff fd21 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800139e:	201b      	movs	r0, #27
 80013a0:	f7ff fd2e 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80013a4:	20c1      	movs	r0, #193	; 0xc1
 80013a6:	f7ff fd1b 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff fd28 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80013b0:	20c5      	movs	r0, #197	; 0xc5
 80013b2:	f7ff fd15 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80013b6:	2030      	movs	r0, #48	; 0x30
 80013b8:	f7ff fd22 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80013bc:	2030      	movs	r0, #48	; 0x30
 80013be:	f7ff fd1f 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80013c2:	20c7      	movs	r0, #199	; 0xc7
 80013c4:	f7ff fd0c 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80013c8:	20b7      	movs	r0, #183	; 0xb7
 80013ca:	f7ff fd19 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80013ce:	2036      	movs	r0, #54	; 0x36
 80013d0:	f7ff fd06 	bl	8000de0 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80013d4:	2008      	movs	r0, #8
 80013d6:	f7ff fd13 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80013da:	203a      	movs	r0, #58	; 0x3a
 80013dc:	f7ff fd00 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80013e0:	2055      	movs	r0, #85	; 0x55
 80013e2:	f7ff fd0d 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80013e6:	20b1      	movs	r0, #177	; 0xb1
 80013e8:	f7ff fcfa 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff fd07 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80013f2:	201a      	movs	r0, #26
 80013f4:	f7ff fd04 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80013f8:	20b6      	movs	r0, #182	; 0xb6
 80013fa:	f7ff fcf1 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80013fe:	200a      	movs	r0, #10
 8001400:	f7ff fcfe 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001404:	20a2      	movs	r0, #162	; 0xa2
 8001406:	f7ff fcfb 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800140a:	20f2      	movs	r0, #242	; 0xf2
 800140c:	f7ff fce8 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fcf5 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001416:	2026      	movs	r0, #38	; 0x26
 8001418:	f7ff fce2 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff fcef 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001422:	20e0      	movs	r0, #224	; 0xe0
 8001424:	f7ff fcdc 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001428:	200f      	movs	r0, #15
 800142a:	f7ff fce9 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800142e:	202a      	movs	r0, #42	; 0x2a
 8001430:	f7ff fce6 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001434:	2028      	movs	r0, #40	; 0x28
 8001436:	f7ff fce3 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800143a:	2008      	movs	r0, #8
 800143c:	f7ff fce0 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001440:	200e      	movs	r0, #14
 8001442:	f7ff fcdd 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001446:	2008      	movs	r0, #8
 8001448:	f7ff fcda 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800144c:	2054      	movs	r0, #84	; 0x54
 800144e:	f7ff fcd7 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001452:	20a9      	movs	r0, #169	; 0xa9
 8001454:	f7ff fcd4 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001458:	2043      	movs	r0, #67	; 0x43
 800145a:	f7ff fcd1 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800145e:	200a      	movs	r0, #10
 8001460:	f7ff fcce 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001464:	200f      	movs	r0, #15
 8001466:	f7ff fccb 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fcc8 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff fcc5 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff fcc2 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff fcbf 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001482:	20e1      	movs	r0, #225	; 0xe1
 8001484:	f7ff fcac 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fcb9 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800148e:	2015      	movs	r0, #21
 8001490:	f7ff fcb6 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001494:	2017      	movs	r0, #23
 8001496:	f7ff fcb3 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800149a:	2007      	movs	r0, #7
 800149c:	f7ff fcb0 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80014a0:	2011      	movs	r0, #17
 80014a2:	f7ff fcad 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80014a6:	2006      	movs	r0, #6
 80014a8:	f7ff fcaa 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80014ac:	202b      	movs	r0, #43	; 0x2b
 80014ae:	f7ff fca7 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80014b2:	2056      	movs	r0, #86	; 0x56
 80014b4:	f7ff fca4 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80014b8:	203c      	movs	r0, #60	; 0x3c
 80014ba:	f7ff fca1 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80014be:	2005      	movs	r0, #5
 80014c0:	f7ff fc9e 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80014c4:	2010      	movs	r0, #16
 80014c6:	f7ff fc9b 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80014ca:	200f      	movs	r0, #15
 80014cc:	f7ff fc98 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80014d0:	203f      	movs	r0, #63	; 0x3f
 80014d2:	f7ff fc95 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80014d6:	203f      	movs	r0, #63	; 0x3f
 80014d8:	f7ff fc92 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80014dc:	200f      	movs	r0, #15
 80014de:	f7ff fc8f 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80014e2:	202b      	movs	r0, #43	; 0x2b
 80014e4:	f7ff fc7c 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fc89 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff fc86 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fc83 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80014fa:	203f      	movs	r0, #63	; 0x3f
 80014fc:	f7ff fc80 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001500:	202a      	movs	r0, #42	; 0x2a
 8001502:	f7ff fc6d 	bl	8000de0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fc7a 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff fc77 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff fc74 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001518:	20ef      	movs	r0, #239	; 0xef
 800151a:	f7ff fc71 	bl	8000e00 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800151e:	2011      	movs	r0, #17
 8001520:	f7ff fc5e 	bl	8000de0 <LCD_WR_REG>
	HAL_Delay(120);
 8001524:	2078      	movs	r0, #120	; 0x78
 8001526:	f000 fe91 	bl	800224c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800152a:	2029      	movs	r0, #41	; 0x29
 800152c:	f7ff fc58 	bl	8000de0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001536:	4804      	ldr	r0, [pc, #16]	; (8001548 <lcd_init+0x2bc>)
 8001538:	f001 f97c 	bl	8002834 <HAL_GPIO_WritePin>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40020800 	.word	0x40020800
 8001544:	20000070 	.word	0x20000070
 8001548:	40020000 	.word	0x40020000

0800154c <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	b29a      	uxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4413      	add	r3, r2
 8001564:	b298      	uxth	r0, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	b29a      	uxth	r2, r3
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	4413      	add	r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	8b3a      	ldrh	r2, [r7, #24]
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fce3 	bl	8000f40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	b29a      	uxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	b29b      	uxth	r3, r3
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b298      	uxth	r0, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	b29a      	uxth	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	4413      	add	r3, r2
 8001590:	b29b      	uxth	r3, r3
 8001592:	8b3a      	ldrh	r2, [r7, #24]
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fcd3 	bl	8000f40 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	b29a      	uxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	b298      	uxth	r0, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	8b3a      	ldrh	r2, [r7, #24]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fcc3 	bl	8000f40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	b298      	uxth	r0, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	8b3a      	ldrh	r2, [r7, #24]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fcb3 	bl	8000f40 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b298      	uxth	r0, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fca3 	bl	8000f40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	b298      	uxth	r0, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	b29a      	uxth	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4413      	add	r3, r2
 8001610:	b29b      	uxth	r3, r3
 8001612:	8b3a      	ldrh	r2, [r7, #24]
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fc93 	bl	8000f40 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	b29a      	uxth	r2, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	b298      	uxth	r0, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	b29a      	uxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	b29b      	uxth	r3, r3
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	b29b      	uxth	r3, r3
 8001632:	8b3a      	ldrh	r2, [r7, #24]
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff fc83 	bl	8000f40 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	b29a      	uxth	r2, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b29b      	uxth	r3, r3
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	b298      	uxth	r0, r3
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	b29a      	uxth	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	b29b      	uxth	r3, r3
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	b29b      	uxth	r3, r3
 8001652:	8b3a      	ldrh	r2, [r7, #24]
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff fc73 	bl	8000f40 <lcd_DrawPoint>
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b08a      	sub	sp, #40	; 0x28
 8001666:	af02      	add	r7, sp, #8
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	603b      	str	r3, [r7, #0]
 800166e:	4613      	mov	r3, r2
 8001670:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	f1c3 0303 	rsb	r3, r3, #3
 8001682:	613b      	str	r3, [r7, #16]


	if (fill)
 8001684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001686:	2b00      	cmp	r3, #0
 8001688:	d04f      	beq.n	800172a <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 800168a:	e029      	b.n	80016e0 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e00a      	b.n	80016a8 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f7ff ff55 	bl	800154c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	ddf0      	ble.n	8001692 <lcd_DrawCircle+0x30>

			if (d < 0) {
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da06      	bge.n	80016c4 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	009a      	lsls	r2, r3, #2
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4413      	add	r3, r2
 80016be:	3306      	adds	r3, #6
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	e00a      	b.n	80016da <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	009a      	lsls	r2, r3, #2
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4413      	add	r3, r2
 80016d0:	330a      	adds	r3, #10
 80016d2:	613b      	str	r3, [r7, #16]
				y--;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3301      	adds	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	ddd1      	ble.n	800168c <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80016e8:	e023      	b.n	8001732 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f7ff ff29 	bl	800154c <_draw_circle_8>
			if (d < 0) {
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da06      	bge.n	800170e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	009a      	lsls	r2, r3, #2
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4413      	add	r3, r2
 8001708:	3306      	adds	r3, #6
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	e00a      	b.n	8001724 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	009a      	lsls	r2, r3, #2
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4413      	add	r3, r2
 800171a:	330a      	adds	r3, #10
 800171c:	613b      	str	r3, [r7, #16]
				y--;
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	3b01      	subs	r3, #1
 8001722:	61bb      	str	r3, [r7, #24]
			x++;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	429a      	cmp	r2, r3
 8001730:	dddb      	ble.n	80016ea <lcd_DrawCircle+0x88>
}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001740:	2201      	movs	r2, #1
 8001742:	2140      	movs	r1, #64	; 0x40
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <led7_init+0x14>)
 8001746:	f001 f875 	bl	8002834 <HAL_GPIO_WritePin>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40021800 	.word	0x40021800

08001754 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001758:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <led7_Scan+0x104>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b3d      	ldr	r3, [pc, #244]	; (8001858 <led7_Scan+0x104>)
 8001762:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001764:	4b3d      	ldr	r3, [pc, #244]	; (800185c <led7_Scan+0x108>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <led7_Scan+0x10c>)
 800176c:	5c9b      	ldrb	r3, [r3, r2]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	b21a      	sxth	r2, r3
 8001772:	4b39      	ldr	r3, [pc, #228]	; (8001858 <led7_Scan+0x104>)
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21b      	sxth	r3, r3
 800177c:	b29a      	uxth	r2, r3
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <led7_Scan+0x104>)
 8001780:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001782:	4b36      	ldr	r3, [pc, #216]	; (800185c <led7_Scan+0x108>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d846      	bhi.n	8001818 <led7_Scan+0xc4>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <led7_Scan+0x3c>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017a1 	.word	0x080017a1
 8001794:	080017bf 	.word	0x080017bf
 8001798:	080017dd 	.word	0x080017dd
 800179c:	080017fb 	.word	0x080017fb
	case 0:
		spi_buffer |= 0x00b0;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <led7_Scan+0x104>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <led7_Scan+0x104>)
 80017ac:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <led7_Scan+0x104>)
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <led7_Scan+0x104>)
 80017ba:	801a      	strh	r2, [r3, #0]
		break;
 80017bc:	e02d      	b.n	800181a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <led7_Scan+0x104>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <led7_Scan+0x104>)
 80017ca:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <led7_Scan+0x104>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	f023 0320 	bic.w	r3, r3, #32
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <led7_Scan+0x104>)
 80017d8:	801a      	strh	r2, [r3, #0]
		break;
 80017da:	e01e      	b.n	800181a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <led7_Scan+0x104>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <led7_Scan+0x104>)
 80017e8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <led7_Scan+0x104>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	f023 0310 	bic.w	r3, r3, #16
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <led7_Scan+0x104>)
 80017f6:	801a      	strh	r2, [r3, #0]
		break;
 80017f8:	e00f      	b.n	800181a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <led7_Scan+0x104>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001802:	b29a      	uxth	r2, r3
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <led7_Scan+0x104>)
 8001806:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <led7_Scan+0x104>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001810:	b29a      	uxth	r2, r3
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <led7_Scan+0x104>)
 8001814:	801a      	strh	r2, [r3, #0]
		break;
 8001816:	e000      	b.n	800181a <led7_Scan+0xc6>
	default:
		break;
 8001818:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <led7_Scan+0x108>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	425a      	negs	r2, r3
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	f002 0203 	and.w	r2, r2, #3
 800182a:	bf58      	it	pl
 800182c:	4253      	negpl	r3, r2
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <led7_Scan+0x108>)
 8001832:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	480a      	ldr	r0, [pc, #40]	; (8001864 <led7_Scan+0x110>)
 800183a:	f000 fffb 	bl	8002834 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800183e:	2301      	movs	r3, #1
 8001840:	2202      	movs	r2, #2
 8001842:	4905      	ldr	r1, [pc, #20]	; (8001858 <led7_Scan+0x104>)
 8001844:	4808      	ldr	r0, [pc, #32]	; (8001868 <led7_Scan+0x114>)
 8001846:	f001 fcfc 	bl	8003242 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800184a:	2201      	movs	r2, #1
 800184c:	2140      	movs	r1, #64	; 0x40
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <led7_Scan+0x110>)
 8001850:	f000 fff0 	bl	8002834 <HAL_GPIO_WritePin>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000014 	.word	0x20000014
 800185c:	20000076 	.word	0x20000076
 8001860:	20000010 	.word	0x20000010
 8001864:	40021800 	.word	0x40021800
 8001868:	20000078 	.word	0x20000078

0800186c <system_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void system_init(){
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	  timer_init();
 8001870:	f000 fa70 	bl	8001d54 <timer_init>
	  led7_init();
 8001874:	f7ff ff62 	bl	800173c <led7_init>
	  button_init();
 8001878:	f7fe fe24 	bl	80004c4 <button_init>
	  lcd_init();
 800187c:	f7ff fd06 	bl	800128c <lcd_init>
	  lcd_status=INIT;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <system_init+0x24>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]
	  set_timer(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f000 fa6e 	bl	8001d68 <set_timer>
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000064 	.word	0x20000064

08001894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001898:	f000 fc66 	bl	8002168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189c:	f000 f814 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a0:	f000 f8fe 	bl	8001aa0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80018a4:	f000 f87a 	bl	800199c <MX_SPI1_Init>
  MX_FSMC_Init();
 80018a8:	f000 f9d4 	bl	8001c54 <MX_FSMC_Init>
  MX_TIM2_Init();
 80018ac:	f000 f8ac 	bl	8001a08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  system_init();
 80018b0:	f7ff ffdc 	bl	800186c <system_init>
  lcd_Clear(WHITE);
 80018b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018b8:	f7ff fb10 	bl	8000edc <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 80018bc:	f7fe fe90 	bl	80005e0 <fsm_automatic_run>
	  fsm_setting_run();
 80018c0:	f7ff f89e 	bl	8000a00 <fsm_setting_run>
	  fsm_automatic_run();
 80018c4:	e7fa      	b.n	80018bc <main+0x28>
	...

080018c8 <SystemClock_Config>:
  */



void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b094      	sub	sp, #80	; 0x50
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	2230      	movs	r2, #48	; 0x30
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 f8a4 	bl	8004a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <SystemClock_Config+0xcc>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a27      	ldr	r2, [pc, #156]	; (8001994 <SystemClock_Config+0xcc>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <SystemClock_Config+0xcc>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <SystemClock_Config+0xd0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <SystemClock_Config+0xd0>)
 8001912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <SystemClock_Config+0xd0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001924:	2302      	movs	r3, #2
 8001926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001928:	2301      	movs	r3, #1
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800192c:	2310      	movs	r3, #16
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001930:	2302      	movs	r3, #2
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001934:	2300      	movs	r3, #0
 8001936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001938:	2308      	movs	r3, #8
 800193a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800193c:	23a8      	movs	r3, #168	; 0xa8
 800193e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001940:	2302      	movs	r3, #2
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001944:	2304      	movs	r3, #4
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001948:	f107 0320 	add.w	r3, r7, #32
 800194c:	4618      	mov	r0, r3
 800194e:	f000 ff8b 	bl	8002868 <HAL_RCC_OscConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001958:	f000 f9f6 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195c:	230f      	movs	r3, #15
 800195e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001960:	2302      	movs	r3, #2
 8001962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001968:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800196c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800196e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2105      	movs	r1, #5
 800197a:	4618      	mov	r0, r3
 800197c:	f001 f9ec 	bl	8002d58 <HAL_RCC_ClockConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001986:	f000 f9df 	bl	8001d48 <Error_Handler>
  }
}
 800198a:	bf00      	nop
 800198c:	3750      	adds	r7, #80	; 0x50
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000

0800199c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019a2:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <MX_SPI1_Init+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019a6:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019d0:	2208      	movs	r2, #8
 80019d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019e8:	220a      	movs	r2, #10
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <MX_SPI1_Init+0x64>)
 80019ee:	f001 fb9f 	bl	8003130 <HAL_SPI_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019f8:	f000 f9a6 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000078 	.word	0x20000078
 8001a04:	40013000 	.word	0x40013000

08001a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a2e:	f240 3247 	movw	r2, #839	; 0x347
 8001a32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a3c:	2263      	movs	r2, #99	; 0x63
 8001a3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a4c:	4813      	ldr	r0, [pc, #76]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a4e:	f002 fa9b 	bl	8003f88 <HAL_TIM_Base_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a58:	f000 f976 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4619      	mov	r1, r3
 8001a68:	480c      	ldr	r0, [pc, #48]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a6a:	f002 fc3d 	bl	80042e8 <HAL_TIM_ConfigClockSource>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a74:	f000 f968 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a80:	463b      	mov	r3, r7
 8001a82:	4619      	mov	r1, r3
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_TIM2_Init+0x94>)
 8001a86:	f002 fe65 	bl	8004754 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a90:	f000 f95a 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200000d0 	.word	0x200000d0

08001aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	4b60      	ldr	r3, [pc, #384]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a5f      	ldr	r2, [pc, #380]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001ac0:	f043 0310 	orr.w	r3, r3, #16
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b56      	ldr	r3, [pc, #344]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a51      	ldr	r2, [pc, #324]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a4a      	ldr	r2, [pc, #296]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a43      	ldr	r2, [pc, #268]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a3c      	ldr	r2, [pc, #240]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
 8001b62:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a35      	ldr	r2, [pc, #212]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LEG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2170      	movs	r1, #112	; 0x70
 8001b7e:	4830      	ldr	r0, [pc, #192]	; (8001c40 <MX_GPIO_Init+0x1a0>)
 8001b80:	f000 fe58 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b8a:	482e      	ldr	r0, [pc, #184]	; (8001c44 <MX_GPIO_Init+0x1a4>)
 8001b8c:	f000 fe52 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b96:	482c      	ldr	r0, [pc, #176]	; (8001c48 <MX_GPIO_Init+0x1a8>)
 8001b98:	f000 fe4c 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	482a      	ldr	r0, [pc, #168]	; (8001c4c <MX_GPIO_Init+0x1ac>)
 8001ba2:	f000 fe47 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LEG_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LEG_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001ba6:	2370      	movs	r3, #112	; 0x70
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4820      	ldr	r0, [pc, #128]	; (8001c40 <MX_GPIO_Init+0x1a0>)
 8001bbe:	f000 fc9d 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_RES_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	481a      	ldr	r0, [pc, #104]	; (8001c44 <MX_GPIO_Init+0x1a4>)
 8001bdc:	f000 fc8e 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001be0:	2340      	movs	r3, #64	; 0x40
 8001be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4817      	ldr	r0, [pc, #92]	; (8001c50 <MX_GPIO_Init+0x1b0>)
 8001bf4:	f000 fc82 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <MX_GPIO_Init+0x1a8>)
 8001c12:	f000 fc73 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001c16:	2308      	movs	r3, #8
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <MX_GPIO_Init+0x1ac>)
 8001c2e:	f000 fc65 	bl	80024fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c32:	bf00      	nop
 8001c34:	3730      	adds	r7, #48	; 0x30
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40021800 	.word	0x40021800

08001c54 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08e      	sub	sp, #56	; 0x38
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001c5a:	f107 031c 	add.w	r3, r7, #28
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
 8001c7c:	615a      	str	r2, [r3, #20]
 8001c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001c80:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001c82:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001c86:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001c8a:	4a2e      	ldr	r2, [pc, #184]	; (8001d44 <MX_FSMC_Init+0xf0>)
 8001c8c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001c9a:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001ca0:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001ca6:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001cac:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001cb2:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001cc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001ce6:	230f      	movs	r3, #15
 8001ce8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001cea:	230f      	movs	r3, #15
 8001cec:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001cee:	233c      	movs	r3, #60	; 0x3c
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001cf6:	2310      	movs	r3, #16
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001cfa:	2311      	movs	r3, #17
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001d02:	2308      	movs	r3, #8
 8001d04:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001d06:	230f      	movs	r3, #15
 8001d08:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001d0a:	2309      	movs	r3, #9
 8001d0c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001d12:	2310      	movs	r3, #16
 8001d14:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001d16:	2311      	movs	r3, #17
 8001d18:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001d1e:	463a      	mov	r2, r7
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <MX_FSMC_Init+0xec>)
 8001d28:	f002 f8e6 	bl	8003ef8 <HAL_SRAM_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001d32:	f000 f809 	bl	8001d48 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001d36:	bf00      	nop
 8001d38:	3738      	adds	r7, #56	; 0x38
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000118 	.word	0x20000118
 8001d44:	a0000104 	.word	0xa0000104

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <Error_Handler+0x8>
	...

08001d54 <timer_init>:

uint16_t timer_counter1 = 0;
uint8_t timer_flag1 = 0;

void timer_init()
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <timer_init+0x10>)
 8001d5a:	f002 f965 	bl	8004028 <HAL_TIM_Base_Start_IT>
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200000d0 	.word	0x200000d0

08001d68 <set_timer>:

void set_timer(uint16_t duration)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
	timer_counter = duration / TIMER_CYCLE;
 8001d72:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <set_timer+0x24>)
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	8013      	strh	r3, [r2, #0]
	timer_flag = 0;
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <set_timer+0x28>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000168 	.word	0x20000168
 8001d90:	2000016a 	.word	0x2000016a

08001d94 <set_timer1>:

void set_timer1(uint16_t duration)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
	timer_counter1 = duration / TIMER_CYCLE;
 8001d9e:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <set_timer1+0x24>)
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	8013      	strh	r3, [r2, #0]
	timer_flag1 = 0;
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <set_timer1+0x28>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	2000016c 	.word	0x2000016c
 8001dbc:	2000016e 	.word	0x2000016e

08001dc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd0:	d127      	bne.n	8001e22 <HAL_TIM_PeriodElapsedCallback+0x62>
	{
		button_Scan();
 8001dd2:	f7fe fb99 	bl	8000508 <button_Scan>
		if (timer_counter > 0)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00e      	beq.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timer_counter--;
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001de8:	801a      	strh	r2, [r3, #0]
			if (timer_counter == 0)
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d104      	bne.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				led7_Scan();
 8001df2:	f7ff fcaf 	bl	8001754 <led7_Scan>
				timer_flag = 1;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
			}
		}

		if (timer_counter1 > 0)
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00e      	beq.n	8001e22 <HAL_TIM_PeriodElapsedCallback+0x62>
		{
			timer_counter1--;
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001e0e:	801a      	strh	r2, [r3, #0]
			if (timer_counter1 == 0)
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				led7_Scan();
 8001e18:	f7ff fc9c 	bl	8001754 <led7_Scan>
				timer_flag1 = 1;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
			}
		}
	}


}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000168 	.word	0x20000168
 8001e30:	2000016a 	.word	0x2000016a
 8001e34:	2000016c 	.word	0x2000016c
 8001e38:	2000016e 	.word	0x2000016e

08001e3c <is_flag>:

uint8_t is_flag()
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
	if (timer_flag == 1)
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <is_flag+0x24>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d104      	bne.n	8001e52 <is_flag+0x16>
	{
		timer_flag = 0;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <is_flag+0x24>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
		return 1;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <is_flag+0x18>
	}
	return 0;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	2000016a 	.word	0x2000016a

08001e64 <is_flag1>:

uint8_t is_flag1()
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
	if (timer_flag1 == 1)
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <is_flag1+0x24>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d104      	bne.n	8001e7a <is_flag1+0x16>
	{
		timer_flag1 = 0;
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <is_flag1+0x24>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
		return 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <is_flag1+0x18>
	}
	return 0;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	2000016e 	.word	0x2000016e

08001e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_MspInit+0x4c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <HAL_SPI_MspInit+0x94>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d133      	bne.n	8001f66 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <HAL_SPI_MspInit+0x98>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a1b      	ldr	r2, [pc, #108]	; (8001f74 <HAL_SPI_MspInit+0x98>)
 8001f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_SPI_MspInit+0x98>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_SPI_MspInit+0x98>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <HAL_SPI_MspInit+0x98>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_SPI_MspInit+0x98>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f36:	2338      	movs	r3, #56	; 0x38
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f46:	2305      	movs	r3, #5
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4809      	ldr	r0, [pc, #36]	; (8001f78 <HAL_SPI_MspInit+0x9c>)
 8001f52:	f000 fad3 	bl	80024fc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2023      	movs	r0, #35	; 0x23
 8001f5c:	f000 fa75 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f60:	2023      	movs	r0, #35	; 0x23
 8001f62:	f000 fa8e 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	; 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40013000 	.word	0x40013000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020400 	.word	0x40020400

08001f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8c:	d115      	bne.n	8001fba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <HAL_TIM_Base_MspInit+0x48>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_TIM_Base_MspInit+0x48>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_TIM_Base_MspInit+0x48>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	201c      	movs	r0, #28
 8001fb0:	f000 fa4b 	bl	800244a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fb4:	201c      	movs	r0, #28
 8001fb6:	f000 fa64 	bl	8002482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <HAL_FSMC_MspInit+0x88>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d131      	bne.n	8002048 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <HAL_FSMC_MspInit+0x88>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_FSMC_MspInit+0x8c>)
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_FSMC_MspInit+0x8c>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6393      	str	r3, [r2, #56]	; 0x38
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_FSMC_MspInit+0x8c>)
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002006:	f64f 7388 	movw	r3, #65416	; 0xff88
 800200a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002018:	230c      	movs	r3, #12
 800201a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	4619      	mov	r1, r3
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <HAL_FSMC_MspInit+0x90>)
 8002022:	f000 fa6b 	bl	80024fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002026:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800202a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002038:	230c      	movs	r3, #12
 800203a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	4619      	mov	r1, r3
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <HAL_FSMC_MspInit+0x94>)
 8002042:	f000 fa5b 	bl	80024fc <HAL_GPIO_Init>
 8002046:	e000      	b.n	800204a <HAL_FSMC_MspInit+0x82>
    return;
 8002048:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000170 	.word	0x20000170
 8002054:	40023800 	.word	0x40023800
 8002058:	40021000 	.word	0x40021000
 800205c:	40020c00 	.word	0x40020c00

08002060 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002068:	f7ff ffae 	bl	8001fc8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002078:	e7fe      	b.n	8002078 <NMI_Handler+0x4>

0800207a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <HardFault_Handler+0x4>

08002080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <MemManage_Handler+0x4>

08002086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <BusFault_Handler+0x4>

0800208c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <UsageFault_Handler+0x4>

08002092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c0:	f000 f8a4 	bl	800220c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <TIM2_IRQHandler+0x10>)
 80020ce:	f002 f81b 	bl	8004108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200000d0 	.word	0x200000d0

080020dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <SPI1_IRQHandler+0x10>)
 80020e2:	f001 fcb5 	bl	8003a50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000078 	.word	0x20000078

080020f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <SystemInit+0x20>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	4a05      	ldr	r2, [pc, #20]	; (8002110 <SystemInit+0x20>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800214c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002118:	f7ff ffea 	bl	80020f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800211e:	490d      	ldr	r1, [pc, #52]	; (8002154 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002134:	4c0a      	ldr	r4, [pc, #40]	; (8002160 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002142:	f002 fc77 	bl	8004a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002146:	f7ff fba5 	bl	8001894 <main>
  bx  lr    
 800214a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800214c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002154:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002158:	08007a34 	.word	0x08007a34
  ldr r2, =_sbss
 800215c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002160:	20000178 	.word	0x20000178

08002164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <ADC_IRQHandler>
	...

08002168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_Init+0x40>)
 8002172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_Init+0x40>)
 800217e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_Init+0x40>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002190:	2003      	movs	r0, #3
 8002192:	f000 f94f 	bl	8002434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002196:	200f      	movs	r0, #15
 8002198:	f000 f808 	bl	80021ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800219c:	f7ff fe76 	bl	8001e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00

080021ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_InitTick+0x54>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_InitTick+0x58>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f967 	bl	800249e <HAL_SYSTICK_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00e      	b.n	80021f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b0f      	cmp	r3, #15
 80021de:	d80a      	bhi.n	80021f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e0:	2200      	movs	r2, #0
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f000 f92f 	bl	800244a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ec:	4a06      	ldr	r2, [pc, #24]	; (8002208 <HAL_InitTick+0x5c>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e000      	b.n	80021f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000018 	.word	0x20000018
 8002204:	20000020 	.word	0x20000020
 8002208:	2000001c 	.word	0x2000001c

0800220c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x20>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x24>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_IncTick+0x24>)
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000020 	.word	0x20000020
 8002230:	20000174 	.word	0x20000174

08002234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_GetTick+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000174 	.word	0x20000174

0800224c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff ffee 	bl	8002234 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d005      	beq.n	8002272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_Delay+0x44>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002272:	bf00      	nop
 8002274:	f7ff ffde 	bl	8002234 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	d8f7      	bhi.n	8002274 <HAL_Delay+0x28>
  {
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000020 	.word	0x20000020

08002294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c6:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	60d3      	str	r3, [r2, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <__NVIC_GetPriorityGrouping+0x18>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	f003 0307 	and.w	r3, r3, #7
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db0b      	blt.n	8002322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	4907      	ldr	r1, [pc, #28]	; (8002330 <__NVIC_EnableIRQ+0x38>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2001      	movs	r0, #1
 800231a:	fa00 f202 	lsl.w	r2, r0, r2
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002400:	d301      	bcc.n	8002406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002402:	2301      	movs	r3, #1
 8002404:	e00f      	b.n	8002426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <SysTick_Config+0x40>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240e:	210f      	movs	r1, #15
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	f7ff ff8e 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SysTick_Config+0x40>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241e:	4b04      	ldr	r3, [pc, #16]	; (8002430 <SysTick_Config+0x40>)
 8002420:	2207      	movs	r2, #7
 8002422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	e000e010 	.word	0xe000e010

08002434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff29 	bl	8002294 <__NVIC_SetPriorityGrouping>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800245c:	f7ff ff3e 	bl	80022dc <__NVIC_GetPriorityGrouping>
 8002460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff8e 	bl	8002388 <NVIC_EncodePriority>
 800246c:	4602      	mov	r2, r0
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff5d 	bl	8002334 <__NVIC_SetPriority>
}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff31 	bl	80022f8 <__NVIC_EnableIRQ>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffa2 	bl	80023f0 <SysTick_Config>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d004      	beq.n	80024d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e00c      	b.n	80024ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2205      	movs	r2, #5
 80024d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	e16b      	b.n	80027f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	429a      	cmp	r2, r3
 8002532:	f040 815a 	bne.w	80027ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d005      	beq.n	800254e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	2b02      	cmp	r3, #2
 800254c:	d130      	bne.n	80025b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	2203      	movs	r2, #3
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002584:	2201      	movs	r2, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 0201 	and.w	r2, r3, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d017      	beq.n	80025ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d123      	bne.n	8002640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	220f      	movs	r2, #15
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	08da      	lsrs	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0203 	and.w	r2, r3, #3
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80b4 	beq.w	80027ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b60      	ldr	r3, [pc, #384]	; (8002808 <HAL_GPIO_Init+0x30c>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	4a5f      	ldr	r2, [pc, #380]	; (8002808 <HAL_GPIO_Init+0x30c>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002690:	6453      	str	r3, [r2, #68]	; 0x44
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <HAL_GPIO_Init+0x30c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269e:	4a5b      	ldr	r2, [pc, #364]	; (800280c <HAL_GPIO_Init+0x310>)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	220f      	movs	r2, #15
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_GPIO_Init+0x314>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02b      	beq.n	8002722 <HAL_GPIO_Init+0x226>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a51      	ldr	r2, [pc, #324]	; (8002814 <HAL_GPIO_Init+0x318>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d025      	beq.n	800271e <HAL_GPIO_Init+0x222>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a50      	ldr	r2, [pc, #320]	; (8002818 <HAL_GPIO_Init+0x31c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <HAL_GPIO_Init+0x21e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4f      	ldr	r2, [pc, #316]	; (800281c <HAL_GPIO_Init+0x320>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d019      	beq.n	8002716 <HAL_GPIO_Init+0x21a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4e      	ldr	r2, [pc, #312]	; (8002820 <HAL_GPIO_Init+0x324>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0x216>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4d      	ldr	r2, [pc, #308]	; (8002824 <HAL_GPIO_Init+0x328>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_Init+0x212>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a4c      	ldr	r2, [pc, #304]	; (8002828 <HAL_GPIO_Init+0x32c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x20e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4b      	ldr	r2, [pc, #300]	; (800282c <HAL_GPIO_Init+0x330>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_Init+0x20a>
 8002702:	2307      	movs	r3, #7
 8002704:	e00e      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002706:	2308      	movs	r3, #8
 8002708:	e00c      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800270a:	2306      	movs	r3, #6
 800270c:	e00a      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800270e:	2305      	movs	r3, #5
 8002710:	e008      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002712:	2304      	movs	r3, #4
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002716:	2303      	movs	r3, #3
 8002718:	e004      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800271a:	2302      	movs	r3, #2
 800271c:	e002      	b.n	8002724 <HAL_GPIO_Init+0x228>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_GPIO_Init+0x228>
 8002722:	2300      	movs	r3, #0
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	f002 0203 	and.w	r2, r2, #3
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4093      	lsls	r3, r2
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002734:	4935      	ldr	r1, [pc, #212]	; (800280c <HAL_GPIO_Init+0x310>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	3302      	adds	r3, #2
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002766:	4a32      	ldr	r2, [pc, #200]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800276c:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_GPIO_Init+0x334>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_GPIO_Init+0x334>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ba:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_GPIO_Init+0x334>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_GPIO_Init+0x334>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e4:	4a12      	ldr	r2, [pc, #72]	; (8002830 <HAL_GPIO_Init+0x334>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3301      	adds	r3, #1
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	f67f ae90 	bls.w	8002518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	40013800 	.word	0x40013800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40020800 	.word	0x40020800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40021000 	.word	0x40021000
 8002824:	40021400 	.word	0x40021400
 8002828:	40021800 	.word	0x40021800
 800282c:	40021c00 	.word	0x40021c00
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002850:	e003      	b.n	800285a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e267      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d075      	beq.n	8002972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002886:	4b88      	ldr	r3, [pc, #544]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d00c      	beq.n	80028ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800289a:	2b08      	cmp	r3, #8
 800289c:	d112      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b82      	ldr	r3, [pc, #520]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028aa:	d10b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	4b7e      	ldr	r3, [pc, #504]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05b      	beq.n	8002970 <HAL_RCC_OscConfig+0x108>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d157      	bne.n	8002970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e242      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028cc:	d106      	bne.n	80028dc <HAL_RCC_OscConfig+0x74>
 80028ce:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a75      	ldr	r2, [pc, #468]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x98>
 80028e6:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6f      	ldr	r2, [pc, #444]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b6d      	ldr	r3, [pc, #436]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6c      	ldr	r2, [pc, #432]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 8002900:	4b69      	ldr	r3, [pc, #420]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a68      	ldr	r2, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a65      	ldr	r2, [pc, #404]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff fc88 	bl	8002234 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7ff fc84 	bl	8002234 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e207      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b5b      	ldr	r3, [pc, #364]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xc0>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7ff fc74 	bl	8002234 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff fc70 	bl	8002234 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1f3      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b51      	ldr	r3, [pc, #324]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0xe8>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d063      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800297e:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b44      	ldr	r3, [pc, #272]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1c7      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e03a      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_OscConfig+0x244>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7ff fc29 	bl	8002234 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e6:	f7ff fc25 	bl	8002234 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1a8      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4925      	ldr	r1, [pc, #148]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	e015      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_OscConfig+0x244>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7ff fc08 	bl	8002234 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a28:	f7ff fc04 	bl	8002234 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e187      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d036      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7ff fbe8 	bl	8002234 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a68:	f7ff fbe4 	bl	8002234 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e167      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x200>
 8002a86:	e01b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7ff fbd1 	bl	8002234 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	e00e      	b.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a96:	f7ff fbcd 	bl	8002234 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d907      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e150      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	42470000 	.word	0x42470000
 8002ab0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ea      	bne.n	8002a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8097 	beq.w	8002bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a7c      	ldr	r2, [pc, #496]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b7a      	ldr	r3, [pc, #488]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b77      	ldr	r3, [pc, #476]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d118      	bne.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0a:	4b74      	ldr	r3, [pc, #464]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a73      	ldr	r2, [pc, #460]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b16:	f7ff fb8d 	bl	8002234 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7ff fb89 	bl	8002234 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e10c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2ea>
 8002b44:	4b64      	ldr	r3, [pc, #400]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a63      	ldr	r2, [pc, #396]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b50:	e01c      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x30c>
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a5e      	ldr	r2, [pc, #376]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	4b5c      	ldr	r3, [pc, #368]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b74:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a57      	ldr	r2, [pc, #348]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	4b55      	ldr	r3, [pc, #340]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a54      	ldr	r2, [pc, #336]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0304 	bic.w	r3, r3, #4
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7ff fb4e 	bl	8002234 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7ff fb4a 	bl	8002234 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0cb      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	4b49      	ldr	r3, [pc, #292]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ee      	beq.n	8002b9c <HAL_RCC_OscConfig+0x334>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7ff fb38 	bl	8002234 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7ff fb34 	bl	8002234 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0b5      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	4a38      	ldr	r2, [pc, #224]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80a1 	beq.w	8002d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c06:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d05c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d141      	bne.n	8002c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff fb08 	bl	8002234 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7ff fb04 	bl	8002234 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e087      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	491b      	ldr	r1, [pc, #108]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7ff fadd 	bl	8002234 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7ff fad9 	bl	8002234 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e05c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x416>
 8002c9c:	e054      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7ff fac6 	bl	8002234 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7ff fac2 	bl	8002234 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e045      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x444>
 8002cca:	e03d      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e038      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_RCC_OscConfig+0x4ec>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d028      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d121      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d11a      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d111      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0cc      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d90c      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b65      	ldr	r3, [pc, #404]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0b8      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002db6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a52      	ldr	r2, [pc, #328]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	494d      	ldr	r1, [pc, #308]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d044      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d119      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e067      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4934      	ldr	r1, [pc, #208]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7ff f9f4 	bl	8002234 <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7ff f9f0 	bl	8002234 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e04f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d20c      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e032      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4916      	ldr	r1, [pc, #88]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	490e      	ldr	r1, [pc, #56]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ede:	f000 f821 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	490a      	ldr	r1, [pc, #40]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	5ccb      	ldrb	r3, [r1, r3]
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff f954 	bl	80021ac <HAL_InitTick>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	08007a14 	.word	0x08007a14
 8002f1c:	20000018 	.word	0x20000018
 8002f20:	2000001c 	.word	0x2000001c

08002f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f28:	b094      	sub	sp, #80	; 0x50
 8002f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3c:	4b79      	ldr	r3, [pc, #484]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x40>
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	f200 80e1 	bhi.w	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x34>
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f56:	e0db      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b73      	ldr	r3, [pc, #460]	; (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f5c:	e0db      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f5e:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f62:	e0d8      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f64:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d063      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	2200      	movs	r2, #0
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f8e:	2300      	movs	r3, #0
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
 8002f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f96:	4622      	mov	r2, r4
 8002f98:	462b      	mov	r3, r5
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	0159      	lsls	r1, r3, #5
 8002fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa8:	0150      	lsls	r0, r2, #5
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4621      	mov	r1, r4
 8002fb0:	1a51      	subs	r1, r2, r1
 8002fb2:	6139      	str	r1, [r7, #16]
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc8:	4659      	mov	r1, fp
 8002fca:	018b      	lsls	r3, r1, #6
 8002fcc:	4651      	mov	r1, sl
 8002fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	018a      	lsls	r2, r1, #6
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fdc:	4659      	mov	r1, fp
 8002fde:	eb63 0901 	sbc.w	r9, r3, r1
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ff6:	4690      	mov	r8, r2
 8002ff8:	4699      	mov	r9, r3
 8002ffa:	4623      	mov	r3, r4
 8002ffc:	eb18 0303 	adds.w	r3, r8, r3
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	462b      	mov	r3, r5
 8003004:	eb49 0303 	adc.w	r3, r9, r3
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003016:	4629      	mov	r1, r5
 8003018:	024b      	lsls	r3, r1, #9
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003020:	4621      	mov	r1, r4
 8003022:	024a      	lsls	r2, r1, #9
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
 800302e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003034:	f7fd f8c8 	bl	80001c8 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	e058      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	2200      	movs	r2, #0
 800304a:	4618      	mov	r0, r3
 800304c:	4611      	mov	r1, r2
 800304e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	f04f 0000 	mov.w	r0, #0
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	0159      	lsls	r1, r3, #5
 800306a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306e:	0150      	lsls	r0, r2, #5
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4641      	mov	r1, r8
 8003076:	ebb2 0a01 	subs.w	sl, r2, r1
 800307a:	4649      	mov	r1, r9
 800307c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800308c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003094:	ebb2 040a 	subs.w	r4, r2, sl
 8003098:	eb63 050b 	sbc.w	r5, r3, fp
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	00eb      	lsls	r3, r5, #3
 80030a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030aa:	00e2      	lsls	r2, r4, #3
 80030ac:	4614      	mov	r4, r2
 80030ae:	461d      	mov	r5, r3
 80030b0:	4643      	mov	r3, r8
 80030b2:	18e3      	adds	r3, r4, r3
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	464b      	mov	r3, r9
 80030b8:	eb45 0303 	adc.w	r3, r5, r3
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ca:	4629      	mov	r1, r5
 80030cc:	028b      	lsls	r3, r1, #10
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d4:	4621      	mov	r1, r4
 80030d6:	028a      	lsls	r2, r1, #10
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030de:	2200      	movs	r2, #0
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	61fa      	str	r2, [r7, #28]
 80030e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e8:	f7fd f86e 	bl	80001c8 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	3301      	adds	r3, #1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800310e:	e002      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003118:	4618      	mov	r0, r3
 800311a:	3750      	adds	r7, #80	; 0x50
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	00f42400 	.word	0x00f42400
 800312c:	007a1200 	.word	0x007a1200

08003130 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07b      	b.n	800323a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d108      	bne.n	800315c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003152:	d009      	beq.n	8003168 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
 800315a:	e005      	b.n	8003168 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fe feaa 	bl	8001edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800319e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	ea42 0103 	orr.w	r1, r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	f003 0104 	and.w	r1, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	f003 0210 	and.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003228:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b088      	sub	sp, #32
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003252:	f7fe ffef 	bl	8002234 <HAL_GetTick>
 8003256:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d001      	beq.n	800326c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
 800326a:	e12a      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_SPI_Transmit+0x36>
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e122      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_SPI_Transmit+0x48>
 8003286:	2302      	movs	r3, #2
 8003288:	e11b      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2203      	movs	r2, #3
 8003296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	88fa      	ldrh	r2, [r7, #6]
 80032aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	88fa      	ldrh	r2, [r7, #6]
 80032b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d8:	d10f      	bne.n	80032fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d007      	beq.n	8003318 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003316:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003320:	d152      	bne.n	80033c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Transmit+0xee>
 800332a:	8b7b      	ldrh	r3, [r7, #26]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d145      	bne.n	80033bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	881a      	ldrh	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	1c9a      	adds	r2, r3, #2
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003354:	e032      	b.n	80033bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b02      	cmp	r3, #2
 8003362:	d112      	bne.n	800338a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	881a      	ldrh	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	1c9a      	adds	r2, r3, #2
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	86da      	strh	r2, [r3, #54]	; 0x36
 8003388:	e018      	b.n	80033bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800338a:	f7fe ff53 	bl	8002234 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d803      	bhi.n	80033a2 <HAL_SPI_Transmit+0x160>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d102      	bne.n	80033a8 <HAL_SPI_Transmit+0x166>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e082      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1c7      	bne.n	8003356 <HAL_SPI_Transmit+0x114>
 80033c6:	e053      	b.n	8003470 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_SPI_Transmit+0x194>
 80033d0:	8b7b      	ldrh	r3, [r7, #26]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d147      	bne.n	8003466 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033fc:	e033      	b.n	8003466 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b02      	cmp	r3, #2
 800340a:	d113      	bne.n	8003434 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	86da      	strh	r2, [r3, #54]	; 0x36
 8003432:	e018      	b.n	8003466 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003434:	f7fe fefe 	bl	8002234 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d803      	bhi.n	800344c <HAL_SPI_Transmit+0x20a>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d102      	bne.n	8003452 <HAL_SPI_Transmit+0x210>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e02d      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1c6      	bne.n	80033fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	6839      	ldr	r1, [r7, #0]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fceb 	bl	8003e50 <SPI_EndRxTxTransaction>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b088      	sub	sp, #32
 80034ce:	af02      	add	r7, sp, #8
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d001      	beq.n	80034ea <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
 80034e8:	e104      	b.n	80036f4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f2:	d112      	bne.n	800351a <HAL_SPI_Receive+0x50>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10e      	bne.n	800351a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2204      	movs	r2, #4
 8003500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003504:	88fa      	ldrh	r2, [r7, #6]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4613      	mov	r3, r2
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f8f3 	bl	80036fc <HAL_SPI_TransmitReceive>
 8003516:	4603      	mov	r3, r0
 8003518:	e0ec      	b.n	80036f4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800351a:	f7fe fe8b 	bl	8002234 <HAL_GetTick>
 800351e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_SPI_Receive+0x62>
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0e1      	b.n	80036f4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_SPI_Receive+0x74>
 800353a:	2302      	movs	r3, #2
 800353c:	e0da      	b.n	80036f4 <HAL_SPI_Receive+0x22a>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2204      	movs	r2, #4
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358c:	d10f      	bne.n	80035ae <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d007      	beq.n	80035cc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d170      	bne.n	80036b6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035d4:	e035      	b.n	8003642 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d115      	bne.n	8003610 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f103 020c 	add.w	r2, r3, #12
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800360e:	e018      	b.n	8003642 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003610:	f7fe fe10 	bl	8002234 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d803      	bhi.n	8003628 <HAL_SPI_Receive+0x15e>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d102      	bne.n	800362e <HAL_SPI_Receive+0x164>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e058      	b.n	80036f4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1c4      	bne.n	80035d6 <HAL_SPI_Receive+0x10c>
 800364c:	e038      	b.n	80036c0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d113      	bne.n	8003684 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	b292      	uxth	r2, r2
 8003668:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	1c9a      	adds	r2, r3, #2
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003682:	e018      	b.n	80036b6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003684:	f7fe fdd6 	bl	8002234 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d803      	bhi.n	800369c <HAL_SPI_Receive+0x1d2>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d102      	bne.n	80036a2 <HAL_SPI_Receive+0x1d8>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e01e      	b.n	80036f4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1c6      	bne.n	800364e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fb5d 	bl	8003d84 <SPI_EndRxTransaction>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80036f2:	2300      	movs	r3, #0
  }
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800370a:	2301      	movs	r3, #1
 800370c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800370e:	f7fe fd91 	bl	8002234 <HAL_GetTick>
 8003712:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800371a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003722:	887b      	ldrh	r3, [r7, #2]
 8003724:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003726:	7ffb      	ldrb	r3, [r7, #31]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d00c      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x4a>
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003732:	d106      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x46>
 800373c:	7ffb      	ldrb	r3, [r7, #31]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d001      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003742:	2302      	movs	r3, #2
 8003744:	e17f      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_SPI_TransmitReceive+0x5c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_SPI_TransmitReceive+0x5c>
 8003752:	887b      	ldrh	r3, [r7, #2]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e174      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_SPI_TransmitReceive+0x6e>
 8003766:	2302      	movs	r3, #2
 8003768:	e16d      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x34a>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b04      	cmp	r3, #4
 800377c:	d003      	beq.n	8003786 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2205      	movs	r2, #5
 8003782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	887a      	ldrh	r2, [r7, #2]
 8003796:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	887a      	ldrh	r2, [r7, #2]
 800379c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	887a      	ldrh	r2, [r7, #2]
 80037a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	887a      	ldrh	r2, [r7, #2]
 80037ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d007      	beq.n	80037da <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e2:	d17e      	bne.n	80038e2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_SPI_TransmitReceive+0xf6>
 80037ec:	8afb      	ldrh	r3, [r7, #22]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d16c      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	881a      	ldrh	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	1c9a      	adds	r2, r3, #2
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003816:	e059      	b.n	80038cc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d11b      	bne.n	800385e <HAL_SPI_TransmitReceive+0x162>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d016      	beq.n	800385e <HAL_SPI_TransmitReceive+0x162>
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	2b01      	cmp	r3, #1
 8003834:	d113      	bne.n	800385e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	881a      	ldrh	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	1c9a      	adds	r2, r3, #2
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	d119      	bne.n	80038a0 <HAL_SPI_TransmitReceive+0x1a4>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d014      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	b292      	uxth	r2, r2
 8003882:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	1c9a      	adds	r2, r3, #2
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800389c:	2301      	movs	r3, #1
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038a0:	f7fe fcc8 	bl	8002234 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d80d      	bhi.n	80038cc <HAL_SPI_TransmitReceive+0x1d0>
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d009      	beq.n	80038cc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e0bc      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1a0      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x11c>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d19b      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x11c>
 80038e0:	e082      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0x1f4>
 80038ea:	8afb      	ldrh	r3, [r7, #22]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d171      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	330c      	adds	r3, #12
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003916:	e05d      	b.n	80039d4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b02      	cmp	r3, #2
 8003924:	d11c      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x264>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d017      	beq.n	8003960 <HAL_SPI_TransmitReceive+0x264>
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	2b01      	cmp	r3, #1
 8003934:	d114      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	330c      	adds	r3, #12
 8003940:	7812      	ldrb	r2, [r2, #0]
 8003942:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d119      	bne.n	80039a2 <HAL_SPI_TransmitReceive+0x2a6>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d014      	beq.n	80039a2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800399e:	2301      	movs	r3, #1
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039a2:	f7fe fc47 	bl	8002234 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d803      	bhi.n	80039ba <HAL_SPI_TransmitReceive+0x2be>
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d102      	bne.n	80039c0 <HAL_SPI_TransmitReceive+0x2c4>
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d109      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e038      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d19c      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x21c>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d197      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039e8:	6a3a      	ldr	r2, [r7, #32]
 80039ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fa2f 	bl	8003e50 <SPI_EndRxTxTransaction>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e01d      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003a44:	2300      	movs	r3, #0
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3728      	adds	r7, #40	; 0x28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10e      	bne.n	8003a90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
    return;
 8003a8e:	e0ce      	b.n	8003c2e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_SPI_IRQHandler+0x5e>
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
    return;
 8003aac:	e0bf      	b.n	8003c2e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <HAL_SPI_IRQHandler+0x7e>
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80b0 	beq.w	8003c2e <HAL_SPI_IRQHandler+0x1de>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80aa 	beq.w	8003c2e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d023      	beq.n	8003b2c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d011      	beq.n	8003b14 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	f043 0204 	orr.w	r2, r3, #4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	e00b      	b.n	8003b2c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	693b      	ldr	r3, [r7, #16]
        return;
 8003b2a:	e080      	b.n	8003c2e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d014      	beq.n	8003b60 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3a:	f043 0201 	orr.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00c      	beq.n	8003b84 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f043 0208 	orr.w	r2, r3, #8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d04f      	beq.n	8003c2c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b9a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <HAL_SPI_IRQHandler+0x168>
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d034      	beq.n	8003c22 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0203 	bic.w	r2, r2, #3
 8003bc6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d011      	beq.n	8003bf4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd4:	4a17      	ldr	r2, [pc, #92]	; (8003c34 <HAL_SPI_IRQHandler+0x1e4>)
 8003bd6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fc6a 	bl	80024b6 <HAL_DMA_Abort_IT>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d016      	beq.n	8003c2a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c00:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <HAL_SPI_IRQHandler+0x1e4>)
 8003c02:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fc54 	bl	80024b6 <HAL_DMA_Abort_IT>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003c20:	e003      	b.n	8003c2a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f808 	bl	8003c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003c28:	e000      	b.n	8003c2c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003c2a:	bf00      	nop
    return;
 8003c2c:	bf00      	nop
  }
}
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	08003c4d 	.word	0x08003c4d

08003c38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7ff ffe6 	bl	8003c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c6c:	bf00      	nop
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c84:	f7fe fad6 	bl	8002234 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c94:	f7fe face 	bl	8002234 <HAL_GetTick>
 8003c98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c9a:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	015b      	lsls	r3, r3, #5
 8003ca0:	0d1b      	lsrs	r3, r3, #20
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003caa:	e054      	b.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d050      	beq.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cb4:	f7fe fabe 	bl	8002234 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d902      	bls.n	8003cca <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d13d      	bne.n	8003d46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce2:	d111      	bne.n	8003d08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cec:	d004      	beq.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf6:	d107      	bne.n	8003d08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d10:	d10f      	bne.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e017      	b.n	8003d76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	bf0c      	ite	eq
 8003d66:	2301      	moveq	r3, #1
 8003d68:	2300      	movne	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d19b      	bne.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000018 	.word	0x20000018

08003d84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d98:	d111      	bne.n	8003dbe <SPI_EndRxTransaction+0x3a>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da2:	d004      	beq.n	8003dae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dac:	d107      	bne.n	8003dbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc6:	d12a      	bne.n	8003e1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d012      	beq.n	8003df8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2180      	movs	r1, #128	; 0x80
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff ff49 	bl	8003c74 <SPI_WaitFlagStateUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d02d      	beq.n	8003e44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e026      	b.n	8003e46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2101      	movs	r1, #1
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff ff36 	bl	8003c74 <SPI_WaitFlagStateUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01a      	beq.n	8003e44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e013      	b.n	8003e46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2101      	movs	r1, #1
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7ff ff23 	bl	8003c74 <SPI_WaitFlagStateUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e000      	b.n	8003e46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2201      	movs	r2, #1
 8003e64:	2102      	movs	r1, #2
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff ff04 	bl	8003c74 <SPI_WaitFlagStateUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	f043 0220 	orr.w	r2, r3, #32
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e032      	b.n	8003ee8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <SPI_EndRxTxTransaction+0xa0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <SPI_EndRxTxTransaction+0xa4>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	0d5b      	lsrs	r3, r3, #21
 8003e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea0:	d112      	bne.n	8003ec8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2180      	movs	r1, #128	; 0x80
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff fee1 	bl	8003c74 <SPI_WaitFlagStateUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d016      	beq.n	8003ee6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e00f      	b.n	8003ee8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b80      	cmp	r3, #128	; 0x80
 8003ee0:	d0f2      	beq.n	8003ec8 <SPI_EndRxTxTransaction+0x78>
 8003ee2:	e000      	b.n	8003ee6 <SPI_EndRxTxTransaction+0x96>
        break;
 8003ee4:	bf00      	nop
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000018 	.word	0x20000018
 8003ef4:	165e9f81 	.word	0x165e9f81

08003ef8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e038      	b.n	8003f80 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7fe f89c 	bl	8002060 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f000 fc9e 	bl	8004874 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	461a      	mov	r2, r3
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	f000 fd00 	bl	8004948 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6858      	ldr	r0, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	f000 fd2d 	bl	80049b4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	6892      	ldr	r2, [r2, #8]
 8003f62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	6892      	ldr	r2, [r2, #8]
 8003f6e:	f041 0101 	orr.w	r1, r1, #1
 8003f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e041      	b.n	800401e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd ffe4 	bl	8001f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 fa7e 	bl	80044c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d001      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e04e      	b.n	80040de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a23      	ldr	r2, [pc, #140]	; (80040ec <HAL_TIM_Base_Start_IT+0xc4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d022      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406a:	d01d      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d018      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d013      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00e      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d009      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <HAL_TIM_Base_Start_IT+0xd8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d004      	beq.n	80040a8 <HAL_TIM_Base_Start_IT+0x80>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a18      	ldr	r2, [pc, #96]	; (8004104 <HAL_TIM_Base_Start_IT+0xdc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d111      	bne.n	80040cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b06      	cmp	r3, #6
 80040b8:	d010      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ca:	e007      	b.n	80040dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40000c00 	.word	0x40000c00
 80040fc:	40010400 	.word	0x40010400
 8004100:	40014000 	.word	0x40014000
 8004104:	40001800 	.word	0x40001800

08004108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d020      	beq.n	800416c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01b      	beq.n	800416c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0202 	mvn.w	r2, #2
 800413c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f999 	bl	800448a <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f98b 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f99c 	bl	800449e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d020      	beq.n	80041b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01b      	beq.n	80041b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0204 	mvn.w	r2, #4
 8004188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f973 	bl	800448a <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f965 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f976 	bl	800449e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d020      	beq.n	8004204 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01b      	beq.n	8004204 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0208 	mvn.w	r2, #8
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2204      	movs	r2, #4
 80041da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f94d 	bl	800448a <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f93f 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f950 	bl	800449e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b00      	cmp	r3, #0
 800420c:	d020      	beq.n	8004250 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01b      	beq.n	8004250 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0210 	mvn.w	r2, #16
 8004220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2208      	movs	r2, #8
 8004226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f927 	bl	800448a <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f919 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f92a 	bl	800449e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00c      	beq.n	8004274 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d007      	beq.n	8004274 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0201 	mvn.w	r2, #1
 800426c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fd fda6 	bl	8001dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00c      	beq.n	8004298 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fae4 	bl	8004860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00c      	beq.n	80042bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f8fb 	bl	80044b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00c      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0220 	mvn.w	r2, #32
 80042d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fab6 	bl	800484c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_TIM_ConfigClockSource+0x1c>
 8004300:	2302      	movs	r3, #2
 8004302:	e0b4      	b.n	800446e <HAL_TIM_ConfigClockSource+0x186>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800432a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433c:	d03e      	beq.n	80043bc <HAL_TIM_ConfigClockSource+0xd4>
 800433e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004342:	f200 8087 	bhi.w	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434a:	f000 8086 	beq.w	800445a <HAL_TIM_ConfigClockSource+0x172>
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004352:	d87f      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b70      	cmp	r3, #112	; 0x70
 8004356:	d01a      	beq.n	800438e <HAL_TIM_ConfigClockSource+0xa6>
 8004358:	2b70      	cmp	r3, #112	; 0x70
 800435a:	d87b      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b60      	cmp	r3, #96	; 0x60
 800435e:	d050      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0x11a>
 8004360:	2b60      	cmp	r3, #96	; 0x60
 8004362:	d877      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b50      	cmp	r3, #80	; 0x50
 8004366:	d03c      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004368:	2b50      	cmp	r3, #80	; 0x50
 800436a:	d873      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d058      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x13a>
 8004370:	2b40      	cmp	r3, #64	; 0x40
 8004372:	d86f      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b30      	cmp	r3, #48	; 0x30
 8004376:	d064      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0x15a>
 8004378:	2b30      	cmp	r3, #48	; 0x30
 800437a:	d86b      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b20      	cmp	r3, #32
 800437e:	d060      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0x15a>
 8004380:	2b20      	cmp	r3, #32
 8004382:	d867      	bhi.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d05c      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0x15a>
 8004388:	2b10      	cmp	r3, #16
 800438a:	d05a      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0x15a>
 800438c:	e062      	b.n	8004454 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800439e:	f000 f9b9 	bl	8004714 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	609a      	str	r2, [r3, #8]
      break;
 80043ba:	e04f      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043cc:	f000 f9a2 	bl	8004714 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043de:	609a      	str	r2, [r3, #8]
      break;
 80043e0:	e03c      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	461a      	mov	r2, r3
 80043f0:	f000 f916 	bl	8004620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2150      	movs	r1, #80	; 0x50
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f96f 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8004400:	e02c      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800440e:	461a      	mov	r2, r3
 8004410:	f000 f935 	bl	800467e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2160      	movs	r1, #96	; 0x60
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f95f 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8004420:	e01c      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442e:	461a      	mov	r2, r3
 8004430:	f000 f8f6 	bl	8004620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2140      	movs	r1, #64	; 0x40
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f94f 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8004440:	e00c      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4619      	mov	r1, r3
 800444c:	4610      	mov	r0, r2
 800444e:	f000 f946 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8004452:	e003      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
      break;
 8004458:	e000      	b.n	800445c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800445a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800446c:	7bfb      	ldrb	r3, [r7, #15]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a46      	ldr	r2, [pc, #280]	; (80045f4 <TIM_Base_SetConfig+0x12c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d013      	beq.n	8004508 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e6:	d00f      	beq.n	8004508 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a43      	ldr	r2, [pc, #268]	; (80045f8 <TIM_Base_SetConfig+0x130>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00b      	beq.n	8004508 <TIM_Base_SetConfig+0x40>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a42      	ldr	r2, [pc, #264]	; (80045fc <TIM_Base_SetConfig+0x134>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d007      	beq.n	8004508 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a41      	ldr	r2, [pc, #260]	; (8004600 <TIM_Base_SetConfig+0x138>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a40      	ldr	r2, [pc, #256]	; (8004604 <TIM_Base_SetConfig+0x13c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d108      	bne.n	800451a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a35      	ldr	r2, [pc, #212]	; (80045f4 <TIM_Base_SetConfig+0x12c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d02b      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d027      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <TIM_Base_SetConfig+0x130>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d023      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a31      	ldr	r2, [pc, #196]	; (80045fc <TIM_Base_SetConfig+0x134>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01f      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a30      	ldr	r2, [pc, #192]	; (8004600 <TIM_Base_SetConfig+0x138>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01b      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2f      	ldr	r2, [pc, #188]	; (8004604 <TIM_Base_SetConfig+0x13c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d017      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2e      	ldr	r2, [pc, #184]	; (8004608 <TIM_Base_SetConfig+0x140>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2d      	ldr	r2, [pc, #180]	; (800460c <TIM_Base_SetConfig+0x144>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00f      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <TIM_Base_SetConfig+0x148>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00b      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2b      	ldr	r2, [pc, #172]	; (8004614 <TIM_Base_SetConfig+0x14c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <TIM_Base_SetConfig+0x150>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d003      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a29      	ldr	r2, [pc, #164]	; (800461c <TIM_Base_SetConfig+0x154>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d108      	bne.n	800458c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a10      	ldr	r2, [pc, #64]	; (80045f4 <TIM_Base_SetConfig+0x12c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d003      	beq.n	80045c0 <TIM_Base_SetConfig+0xf8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a12      	ldr	r2, [pc, #72]	; (8004604 <TIM_Base_SetConfig+0x13c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d103      	bne.n	80045c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d105      	bne.n	80045e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f023 0201 	bic.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	611a      	str	r2, [r3, #16]
  }
}
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40010000 	.word	0x40010000
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800
 8004600:	40000c00 	.word	0x40000c00
 8004604:	40010400 	.word	0x40010400
 8004608:	40014000 	.word	0x40014000
 800460c:	40014400 	.word	0x40014400
 8004610:	40014800 	.word	0x40014800
 8004614:	40001800 	.word	0x40001800
 8004618:	40001c00 	.word	0x40001c00
 800461c:	40002000 	.word	0x40002000

08004620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f023 0201 	bic.w	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800464a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f023 030a 	bic.w	r3, r3, #10
 800465c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	621a      	str	r2, [r3, #32]
}
 8004672:	bf00      	nop
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800467e:	b480      	push	{r7}
 8004680:	b087      	sub	sp, #28
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f023 0210 	bic.w	r2, r3, #16
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	031b      	lsls	r3, r3, #12
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f043 0307 	orr.w	r3, r3, #7
 8004700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800472e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	431a      	orrs	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4313      	orrs	r3, r2
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004768:	2302      	movs	r3, #2
 800476a:	e05a      	b.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a21      	ldr	r2, [pc, #132]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d022      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b8:	d01d      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d018      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1a      	ldr	r2, [pc, #104]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a17      	ldr	r2, [pc, #92]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a15      	ldr	r2, [pc, #84]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d10c      	bne.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	4313      	orrs	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40010000 	.word	0x40010000
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40010400 	.word	0x40010400
 8004844:	40014000 	.word	0x40014000
 8004848:	40001800 	.word	0x40001800

0800484c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	f023 0101 	bic.w	r1, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b08      	cmp	r3, #8
 800489c:	d102      	bne.n	80048a4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800489e:	2340      	movs	r3, #64	; 0x40
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e001      	b.n	80048a8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80048b4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80048ba:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80048c0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80048c6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80048cc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80048d2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80048d8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80048de:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80048e4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <FSMC_NORSRAM_Init+0xd0>)
 8004904:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800490c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004914:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	43db      	mvns	r3, r3
 8004924:	ea02 0103 	and.w	r1, r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	4319      	orrs	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	0008fb7f 	.word	0x0008fb7f

08004948 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	431a      	orrs	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	431a      	orrs	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	431a      	orrs	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	3b01      	subs	r3, #1
 8004984:	051b      	lsls	r3, r3, #20
 8004986:	431a      	orrs	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	3b02      	subs	r3, #2
 800498e:	061b      	lsls	r3, r3, #24
 8004990:	431a      	orrs	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	4313      	orrs	r3, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	3201      	adds	r2, #1
 800499c:	4319      	orrs	r1, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049c8:	d11d      	bne.n	8004a06 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	6811      	ldr	r1, [r2, #0]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	6852      	ldr	r2, [r2, #4]
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	4311      	orrs	r1, r2
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	6892      	ldr	r2, [r2, #8]
 80049e6:	0212      	lsls	r2, r2, #8
 80049e8:	4311      	orrs	r1, r2
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	6992      	ldr	r2, [r2, #24]
 80049ee:	4311      	orrs	r1, r2
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	68d2      	ldr	r2, [r2, #12]
 80049f4:	0412      	lsls	r2, r2, #16
 80049f6:	430a      	orrs	r2, r1
 80049f8:	ea43 0102 	orr.w	r1, r3, r2
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004a04:	e005      	b.n	8004a12 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	cff00000 	.word	0xcff00000

08004a24 <memset>:
 8004a24:	4402      	add	r2, r0
 8004a26:	4603      	mov	r3, r0
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d100      	bne.n	8004a2e <memset+0xa>
 8004a2c:	4770      	bx	lr
 8004a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a32:	e7f9      	b.n	8004a28 <memset+0x4>

08004a34 <__libc_init_array>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	4d0d      	ldr	r5, [pc, #52]	; (8004a6c <__libc_init_array+0x38>)
 8004a38:	4c0d      	ldr	r4, [pc, #52]	; (8004a70 <__libc_init_array+0x3c>)
 8004a3a:	1b64      	subs	r4, r4, r5
 8004a3c:	10a4      	asrs	r4, r4, #2
 8004a3e:	2600      	movs	r6, #0
 8004a40:	42a6      	cmp	r6, r4
 8004a42:	d109      	bne.n	8004a58 <__libc_init_array+0x24>
 8004a44:	4d0b      	ldr	r5, [pc, #44]	; (8004a74 <__libc_init_array+0x40>)
 8004a46:	4c0c      	ldr	r4, [pc, #48]	; (8004a78 <__libc_init_array+0x44>)
 8004a48:	f000 f818 	bl	8004a7c <_init>
 8004a4c:	1b64      	subs	r4, r4, r5
 8004a4e:	10a4      	asrs	r4, r4, #2
 8004a50:	2600      	movs	r6, #0
 8004a52:	42a6      	cmp	r6, r4
 8004a54:	d105      	bne.n	8004a62 <__libc_init_array+0x2e>
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5c:	4798      	blx	r3
 8004a5e:	3601      	adds	r6, #1
 8004a60:	e7ee      	b.n	8004a40 <__libc_init_array+0xc>
 8004a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a66:	4798      	blx	r3
 8004a68:	3601      	adds	r6, #1
 8004a6a:	e7f2      	b.n	8004a52 <__libc_init_array+0x1e>
 8004a6c:	08007a2c 	.word	0x08007a2c
 8004a70:	08007a2c 	.word	0x08007a2c
 8004a74:	08007a2c 	.word	0x08007a2c
 8004a78:	08007a30 	.word	0x08007a30

08004a7c <_init>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr

08004a88 <_fini>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr
